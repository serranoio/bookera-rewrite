import { html as f, render as w } from "lit";
import { unsafeHTML as g } from "lit/directives/unsafe-html.js";
const c = "[data-cy-root]", a = () => {
  const e = document.querySelector(c);
  if (e)
    return e;
  throw Error(`No element found that matches selector ${c}. Please add a root element with data-cy-root attribute to your "component-index.html" file so that Cypress can attach your component to the DOM.`);
};
function h(e) {
  Cypress.testingType === "component" && (Cypress.Commands.overwrite("visit", () => {
    throw new Error("cy.visit from a component spec is not allowed");
  }), Cypress.Commands.overwrite("session", () => {
    throw new Error("cy.session from a component spec is not allowed");
  }), Cypress.Commands.overwrite("origin", () => {
    throw new Error("cy.origin from a component spec is not allowed");
  }), Cypress.on("test:before:run", () => {
    e == null || e();
  }));
}
let s;
Cypress.on("run:start", () => {
  Cypress.testingType === "component" && Cypress.on("test:before:run", () => {
    s == null || s.remove();
    const e = a();
    e.innerHTML = "";
  });
});
const v = (e, m = {}) => cy.then(() => {
  const p = a(), l = typeof e == "string" ? f`${g(e)}` : e, r = document.createElement("div");
  return r.id = "__cy_lit_root", p.append(r), w(l, r), cy.wrap(r, { log: !1 }).wait(1, { log: !1 }).children().first().then((y) => {
    const i = y.prop("tagName").toLowerCase(), n = document.getElementsByTagName(i)[0], { properties: o, log: u = !0 } = m;
    if (o && typeof o == "object" && Array.isArray(o) === !1) {
      for (const t in o)
        if (t in n) {
          const d = o[t];
          n[t] = d;
        }
    }
    if (s = n, u) {
      const t = `<${i} ... />`;
      Cypress.log({
        name: "mount",
        message: [t]
      }).snapshot("mounted").end();
    }
    return cy.wrap(n, { log: !1 });
  });
});
h();
export {
  v as mount
};

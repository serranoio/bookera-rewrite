{
  "version": 3,
  "sources": ["../../@lit/localize/src/internal/locale-status-event.ts", "../../@lit/localize/src/internal/str-tag.ts", "../../@lit/localize/src/internal/default-msg.ts", "../../@lit/localize/src/init/install.ts", "../../@lit/localize/src/internal/localized-controller.ts", "../../@lit/localize/src/internal/localized-decorator.ts", "../../@lit/localize/src/internal/deferred.ts", "../../@lit/localize/src/internal/fnv1a64.ts", "../../@lit/localize/src/internal/id-generation.ts", "../../@lit/localize/src/internal/runtime-msg.ts", "../../@lit/localize/src/init/runtime.ts", "../../@lit/localize/src/init/transform.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Name of the event dispatched to `window` whenever a locale change starts,\n * finishes successfully, or fails. Only relevant to runtime mode.\n *\n * The `detail` of this event is an object with a `status` string that can be:\n * \"loading\", \"ready\", or \"error\", along with the relevant locale code, and\n * error message if applicable.\n *\n * You can listen for this event to know when your application should be\n * re-rendered following a locale change. See also the Localized mixin, which\n * automatically re-renders LitElement classes using this event.\n */\nexport const LOCALE_STATUS_EVENT = 'lit-localize-status';\n\n// Misfiring eslint rule\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare global {\n  interface WindowEventMap {\n    [LOCALE_STATUS_EVENT]: CustomEvent<LocaleStatusEventDetail>;\n  }\n}\n\n/**\n * The possible details of the \"lit-localize-status\" event.\n */\nexport type LocaleStatusEventDetail = LocaleLoading | LocaleReady | LocaleError;\n\n/**\n * Detail of the \"lit-localize-status\" event when a new locale has started to\n * load.\n *\n * A \"loading\" status can be followed by [1] another \"loading\" status (in the\n * case that a second locale is requested before the first one completed), [2] a\n * \"ready\" status, or [3] an \"error\" status.\n */\nexport interface LocaleLoading {\n  status: 'loading';\n  /** Code of the locale that has started loading. */\n  loadingLocale: string;\n}\n\n/**\n * Detail of the \"lit-localize-status\" event when a new locale has successfully\n * loaded and is ready for rendering.\n *\n * A \"ready\" status can be followed only by a \"loading\" status.\n */\nexport interface LocaleReady {\n  status: 'ready';\n  /** Code of the locale that has successfully loaded. */\n  readyLocale: string;\n}\n\n/**\n * Detail of the \"lit-localize-status\" event when a new locale failed to load.\n *\n * An \"error\" status can be followed only by a \"loading\" status.\n */\nexport interface LocaleError {\n  status: 'error';\n  /** Code of the locale that failed to load. */\n  errorLocale: string;\n  /** Error message from locale load failure. */\n  errorMessage: string;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport type {TemplateLike} from './types.js';\n\nexport interface StrResult {\n  strTag: true;\n  strings: TemplateStringsArray;\n  values: unknown[];\n}\n\n/**\n * Tag that allows expressions to be used in localized non-HTML template\n * strings.\n *\n * Example: msg(str`Hello ${this.user}!`);\n *\n * The Lit html tag can also be used for this purpose, but HTML will need to be\n * escaped, and there is a small overhead for HTML parsing.\n *\n * Untagged template strings with expressions aren't supported by lit-localize\n * because they don't allow for values to be captured at runtime.\n */\nconst _str = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StrResult => ({\n  strTag: true,\n  strings,\n  values,\n});\n\nexport const str: typeof _str & {_LIT_LOCALIZE_STR_?: never} = _str;\n\nexport const isStrTagged = (val: TemplateLike): val is StrResult =>\n  typeof val !== 'string' && 'strTag' in val;\n\n/**\n * Render the result of a `str` tagged template to a string. Note we don't need\n * to do this for Lit templates, since Lit itself handles rendering.\n */\nexport const joinStringsAndValues = (\n  strings: TemplateStringsArray,\n  values: Readonly<unknown[]>,\n  valueOrder?: number[]\n) => {\n  let concat = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    concat += values[valueOrder ? valueOrder[i - 1] : i - 1];\n    concat += strings[i];\n  }\n  return concat;\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {isStrTagged, joinStringsAndValues} from './str-tag.js';\n\nimport type {MsgFn, TemplateLike} from './types.js';\n\n/**\n * Default identity msg implementation. Simply returns the input template with\n * no awareness of translations. If the template is str-tagged, returns it in\n * string form.\n */\nexport const defaultMsg = ((template: TemplateLike) =>\n  isStrTagged(template)\n    ? joinStringsAndValues(template.strings, template.values)\n    : template) as MsgFn;\n", "import type {MsgFn} from '../internal/types.js';\nimport {defaultMsg} from '../internal/default-msg.js';\n\n/**\n * Make a string or lit-html template localizable.\n *\n * @param template A string, a lit-html template, or a function that returns\n * either a string or lit-html template.\n * @param options Optional configuration object with the following properties:\n *   - id: Optional project-wide unique identifier for this template. If\n *     omitted, an id will be automatically generated from the template strings.\n *   - desc: Optional description\n */\nexport let msg: MsgFn = defaultMsg;\n\nlet installed = false;\n\n/**\n * Internal only. Do not use this function.\n *\n * Installs an implementation of the msg function to replace the default\n * identity function. Throws if called more than once.\n *\n * @internal\n */\nexport function _installMsgImplementation(impl: MsgFn) {\n  if (installed) {\n    throw new Error('lit-localize can only be configured once');\n  }\n  msg = impl;\n  installed = true;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LOCALE_STATUS_EVENT} from './locale-status-event.js';\n\nimport type {ReactiveController, ReactiveControllerHost} from 'lit';\n\nclass LocalizeController implements ReactiveController {\n  host: ReactiveControllerHost;\n\n  constructor(host: ReactiveControllerHost) {\n    this.host = host;\n  }\n\n  private readonly __litLocalizeEventHandler = (\n    event: WindowEventMap[typeof LOCALE_STATUS_EVENT]\n  ) => {\n    if (event.detail.status === 'ready') {\n      this.host.requestUpdate();\n    }\n  };\n\n  hostConnected() {\n    window.addEventListener(\n      LOCALE_STATUS_EVENT,\n      this.__litLocalizeEventHandler\n    );\n  }\n\n  hostDisconnected() {\n    window.removeEventListener(\n      LOCALE_STATUS_EVENT,\n      this.__litLocalizeEventHandler\n    );\n  }\n}\n\n/**\n * Re-render the given LitElement whenever a new active locale has loaded.\n *\n * See also {@link localized} for the same functionality as a decorator.\n *\n * When using lit-localize in transform mode, calls to this function are\n * replaced with undefined.\n *\n * Usage:\n *\n *   import {LitElement, html} from 'lit';\n *   import {msg, updateWhenLocaleChanges} from '@lit/localize';\n *\n *   class MyElement extends LitElement {\n *     constructor() {\n *       super();\n *       updateWhenLocaleChanges(this);\n *     }\n *\n *     render() {\n *       return html`<b>${msg('Hello World')}</b>`;\n *     }\n *   }\n */\nconst _updateWhenLocaleChanges = (host: ReactiveControllerHost) =>\n  host.addController(new LocalizeController(host));\n\nexport const updateWhenLocaleChanges: typeof _updateWhenLocaleChanges & {\n  _LIT_LOCALIZE_CONTROLLER_FN_?: never;\n} = _updateWhenLocaleChanges;\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {updateWhenLocaleChanges} from './localized-controller.js';\n\nimport type {ReactiveControllerHost} from 'lit';\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\ntype ReactiveElementClass = {\n  addInitializer(initializer: (element: ReactiveControllerHost) => void): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): ReactiveControllerHost;\n};\n\nexport type LocalizedDecorator = {\n  // legacy\n  (cls: ReactiveElementClass): void;\n\n  // standard\n  (\n    target: ReactiveElementClass,\n    context: ClassDecoratorContext<ReactiveElementClass>\n  ): void;\n};\n\n/**\n * Class decorator to enable re-rendering the given LitElement whenever a new\n * active locale has loaded.\n *\n * See also {@link updateWhenLocaleChanges} for the same functionality without\n * the use of decorators.\n *\n * When using lit-localize in transform mode, applications of this decorator are\n * removed.\n *\n * Usage:\n *\n *   import {LitElement, html} from 'lit';\n *   import {customElement} from 'lit/decorators.js';\n *   import {msg, localized} from '@lit/localize';\n *\n *   @localized()\n *   @customElement('my-element')\n *   class MyElement extends LitElement {\n *     render() {\n *       return html`<b>${msg('Hello World')}</b>`;\n *     }\n *   }\n */\nexport const localized: Localized =\n  (): LocalizedDecorator =>\n  (\n    clazz: ReactiveElementClass,\n    _context?: ClassDecoratorContext<ReactiveElementClass>\n  ) => {\n    clazz.addInitializer(updateWhenLocaleChanges);\n    return clazz;\n  };\n\ntype Localized = (() => LocalizedDecorator) & {\n  // Used by the localize-tools transform to detect this decorator based\n  // on type.\n  _LIT_LOCALIZE_DECORATOR_?: never;\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport class Deferred<T> {\n  readonly promise: Promise<T>;\n  private _resolve!: (value: T) => void;\n  private _reject!: (error: Error) => void;\n  settled = false;\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  resolve(value: T) {\n    this.settled = true;\n    this._resolve(value);\n  }\n\n  reject(error: Error) {\n    this.settled = true;\n    this._reject(error);\n  }\n}\n", "/**\n * @license\n * Copyright 2014 Travis Webb\n * SPDX-License-Identifier: MIT\n */\n\n// This module is derived from the file:\n// https://github.com/tjwebb/fnv-plus/blob/1e2ce68a07cb7dd4c3c85364f3d8d96c95919474/index.js#L309\n//\n// Changes:\n// - Only the _hash64_1a_fast function is included.\n// - Removed loop unrolling.\n// - Converted to TypeScript ES module.\n// - var -> let/const\n//\n// TODO(aomarks) Upstream improvements to https://github.com/tjwebb/fnv-plus/.\n\nconst hl: string[] = [];\nfor (let i = 0; i < 256; i++) {\n  hl[i] = ((i >> 4) & 15).toString(16) + (i & 15).toString(16);\n}\n\n/**\n * Perform a FNV-1A 64-bit hash of the given string (as UTF-16 code units), and\n * return a hexadecimal digest (left zero padded to 16 characters).\n *\n * @see {@link http://tools.ietf.org/html/draft-eastlake-fnv-06}\n */\nexport function fnv1a64(str: string) {\n  let t0 = 0,\n    v0 = 0x2325,\n    t1 = 0,\n    v1 = 0x8422,\n    t2 = 0,\n    v2 = 0x9ce4,\n    t3 = 0,\n    v3 = 0xcbf2;\n\n  for (let i = 0; i < str.length; i++) {\n    v0 ^= str.charCodeAt(i);\n    t0 = v0 * 435;\n    t1 = v1 * 435;\n    t2 = v2 * 435;\n    t3 = v3 * 435;\n    t2 += v0 << 8;\n    t3 += v1 << 8;\n    t1 += t0 >>> 16;\n    v0 = t0 & 65535;\n    t2 += t1 >>> 16;\n    v1 = t1 & 65535;\n    v3 = (t3 + (t2 >>> 16)) & 65535;\n    v2 = t2 & 65535;\n  }\n\n  return (\n    hl[v3 >> 8] +\n    hl[v3 & 255] +\n    hl[v2 >> 8] +\n    hl[v2 & 255] +\n    hl[v1 >> 8] +\n    hl[v1 & 255] +\n    hl[v0 >> 8] +\n    hl[v0 & 255]\n  );\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {fnv1a64} from './fnv1a64.js';\n\n/**\n * Delimiter used between each template string component before hashing. Used to\n * prevent e.g. \"foobar\" and \"foo${baz}bar\" from sharing a hash.\n *\n * This is the \"record separator\" ASCII character.\n */\nexport const HASH_DELIMITER = '\\x1e';\n\n/**\n * Id prefix on html-tagged templates to distinguish e.g. `<b>x</b>` from\n * html`<b>x</b>`.\n */\nconst HTML_PREFIX = 'h';\n\n/**\n * Id prefix on plain string templates to distinguish e.g. `<b>x</b>` from\n * html`<b>x</b>`.\n */\nconst STRING_PREFIX = 's';\n\n/**\n * Generate a unique ID for a lit-localize message.\n *\n * Example:\n *   Template: html`Hello <b>${who}</b>!`\n *     Params: [\"Hello <b>\", \"</b>!\"], true\n *     Output: h82ccc38d4d46eaa9\n *\n * The ID is constructed as:\n *\n *   [0]    Kind of template: [h]tml or [s]tring.\n *   [1,16] 64-bit FNV-1a hash hex digest of the template strings, as UTF-16\n *          code points, delineated by an ASCII \"record separator\" character.\n *\n * We choose FNV-1a because:\n *\n *   1. It's pretty fast (e.g. much faster than SHA-1).\n *   2. It's pretty small (0.25 KiB minified + brotli).\n *   3. We don't require cryptographic security, and 64 bits should give\n *      sufficient collision resistance for any one application. Worst\n *      case, we will always detect collisions during analysis.\n *   4. We can't use Web Crypto API (e.g. SHA-1), because it's asynchronous.\n *   5. It's a well known non-cryptographic hash with implementations in many\n *      languages.\n *   6. There was an existing JavaScript implementation that doesn't require\n *      BigInt, for IE11 compatibility.\n */\nexport function generateMsgId(\n  strings: string | string[] | TemplateStringsArray,\n  isHtmlTagged: boolean\n): string {\n  return (\n    (isHtmlTagged ? HTML_PREFIX : STRING_PREFIX) +\n    fnv1a64(\n      typeof strings === 'string' ? strings : strings.join(HASH_DELIMITER)\n    )\n  );\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {defaultMsg} from './default-msg.js';\nimport {joinStringsAndValues} from './str-tag.js';\nimport {generateMsgId} from './id-generation.js';\n\nimport type {TemplateLike, MsgOptions, TemplateMap} from './types.js';\nimport type {TemplateResult} from 'lit';\n\nconst expressionOrders = new WeakMap<TemplateResult, number[]>();\nconst hashCache = new Map<TemplateStringsArray | string, string>();\n\nexport function runtimeMsg(\n  templates: TemplateMap | undefined,\n  template: TemplateLike,\n  options: MsgOptions | undefined\n): string | TemplateResult {\n  if (templates) {\n    const id = options?.id ?? generateId(template);\n    const localized = templates[id];\n    if (localized) {\n      if (typeof localized === 'string') {\n        // E.g. \"Hello World!\"\n        return localized;\n      } else if ('strTag' in localized) {\n        // E.g. str`Hello ${name}!`\n        //\n        // Localized templates have ${number} in place of real template\n        // expressions. They can't have real template values, because the\n        // variable scope would be wrong. The number tells us the index of the\n        // source value to substitute in its place, because expressions can be\n        // moved to a different position during translation.\n        return joinStringsAndValues(\n          localized.strings,\n          // Cast `template` because its type wasn't automatically narrowed (but\n          // we know it must be the same type as `localized`).\n          (template as TemplateResult).values,\n          localized.values as number[]\n        );\n      } else {\n        // E.g. html`Hello <b>${name}</b>!`\n        //\n        // We have to keep our own mapping of expression ordering because we do\n        // an in-place update of `values`, and otherwise we'd lose ordering for\n        // subsequent renders.\n        let order = expressionOrders.get(localized);\n        if (order === undefined) {\n          order = localized.values as number[];\n          expressionOrders.set(localized, order);\n        }\n        return {\n          ...localized,\n          values: order.map((i) => (template as TemplateResult).values[i]),\n        };\n      }\n    }\n  }\n  return defaultMsg(template);\n}\n\nfunction generateId(template: TemplateLike): string {\n  const strings = typeof template === 'string' ? template : template.strings;\n  let id = hashCache.get(strings);\n  if (id === undefined) {\n    id = generateMsgId(\n      strings,\n      typeof template !== 'string' && !('strTag' in template)\n    );\n    hashCache.set(strings, id);\n  }\n  return id;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Deferred} from '../internal/deferred.js';\nimport {LOCALE_STATUS_EVENT} from '../internal/locale-status-event.js';\nimport {runtimeMsg} from '../internal/runtime-msg.js';\n\nimport type {LocaleStatusEventDetail} from '../internal/locale-status-event.js';\nimport type {\n  LocaleModule,\n  TemplateLike,\n  TemplateMap,\n  MsgFn,\n  MsgOptions,\n} from '../internal/types.js';\nimport {_installMsgImplementation} from './install.js';\n\n/**\n * Configuration parameters for lit-localize when in runtime mode.\n */\nexport interface RuntimeConfiguration {\n  /**\n   * Required locale code in which source templates in this project are written,\n   * and the initial active locale.\n   */\n  sourceLocale: string;\n\n  /**\n   * Required locale codes that are supported by this project. Should not\n   * include the `sourceLocale` code.\n   */\n  targetLocales: Iterable<string>;\n\n  /**\n   * Required function that returns the localized templates for the given locale\n   * code.\n   *\n   * This function will only ever be called with a `locale` that is contained by\n   * `targetLocales`.\n   */\n  loadLocale: (locale: string) => Promise<LocaleModule>;\n}\n\n/**\n * Dispatch a \"lit-localize-status\" event to `window` with the given detail.\n */\nfunction dispatchStatusEvent(detail: LocaleStatusEventDetail) {\n  window.dispatchEvent(new CustomEvent(LOCALE_STATUS_EVENT, {detail}));\n}\n\nlet activeLocale = '';\nlet loadingLocale: string | undefined;\nlet sourceLocale: string | undefined;\nlet validLocales: Set<string> | undefined;\nlet loadLocale: ((locale: string) => Promise<LocaleModule>) | undefined;\nlet templates: TemplateMap | undefined;\nlet loading = new Deferred<void>();\n// The loading promise must be initially resolved, because that's what we should\n// return if the user immediately calls setLocale(sourceLocale).\nloading.resolve();\nlet requestId = 0;\n\n/**\n * Set configuration parameters for lit-localize when in runtime mode. Returns\n * an object with functions:\n *\n * - `getLocale`: Return the active locale code.\n * - `setLocale`: Set the active locale code.\n *\n * Throws if called more than once.\n */\nexport const configureLocalization: ((config: RuntimeConfiguration) => {\n  getLocale: typeof getLocale;\n  setLocale: typeof setLocale;\n}) & {\n  _LIT_LOCALIZE_CONFIGURE_LOCALIZATION_?: never;\n} = (config: RuntimeConfiguration) => {\n  _installMsgImplementation(((template: TemplateLike, options?: MsgOptions) =>\n    runtimeMsg(templates, template, options)) as MsgFn);\n  activeLocale = sourceLocale = config.sourceLocale;\n  validLocales = new Set(config.targetLocales);\n  validLocales.add(config.sourceLocale);\n  loadLocale = config.loadLocale;\n  return {getLocale, setLocale};\n};\n\n/**\n * Return the active locale code.\n */\nconst getLocale: (() => string) & {\n  _LIT_LOCALIZE_GET_LOCALE_?: never;\n} = () => {\n  return activeLocale;\n};\n\n/**\n * Set the active locale code, and begin loading templates for that locale using\n * the `loadLocale` function that was passed to `configureLocalization`. Returns\n * a promise that resolves when the next locale is ready to be rendered.\n *\n * Note that if a second call to `setLocale` is made while the first requested\n * locale is still loading, then the second call takes precedence, and the\n * promise returned from the first call will resolve when second locale is\n * ready. If you need to know whether a particular locale was loaded, check\n * `getLocale` after the promise resolves.\n *\n * Throws if the given locale is not contained by the configured `sourceLocale`\n * or `targetLocales`.\n */\nconst setLocale: ((newLocale: string) => Promise<void>) & {\n  _LIT_LOCALIZE_SET_LOCALE_?: never;\n} = (newLocale: string) => {\n  if (newLocale === (loadingLocale ?? activeLocale)) {\n    return loading.promise;\n  }\n  if (!validLocales || !loadLocale) {\n    throw new Error('Internal error');\n  }\n  if (!validLocales.has(newLocale)) {\n    throw new Error('Invalid locale code');\n  }\n  requestId++;\n  const thisRequestId = requestId;\n  loadingLocale = newLocale;\n  if (loading.settled) {\n    loading = new Deferred();\n  }\n  dispatchStatusEvent({status: 'loading', loadingLocale: newLocale});\n  const localePromise: Promise<Partial<LocaleModule>> =\n    newLocale === sourceLocale\n      ? // We could switch to the source locale synchronously, but we prefer to\n        // queue it on a microtask so that switching locales is consistently\n        // asynchronous.\n        Promise.resolve({templates: undefined})\n      : loadLocale(newLocale);\n  localePromise.then(\n    (mod) => {\n      if (requestId === thisRequestId) {\n        activeLocale = newLocale;\n        loadingLocale = undefined;\n        templates = mod.templates;\n        dispatchStatusEvent({status: 'ready', readyLocale: newLocale});\n        loading.resolve();\n      }\n      // Else another locale was requested in the meantime. Don't resolve or\n      // reject, because the newer load call is going to use the same promise.\n      // Note the user can call getLocale() after the promise resolves if they\n      // need to check if the locale is still the one they expected to load.\n    },\n    (err) => {\n      if (requestId === thisRequestId) {\n        dispatchStatusEvent({\n          status: 'error',\n          errorLocale: newLocale,\n          errorMessage: err.toString(),\n        });\n        loading.reject(err);\n      }\n    }\n  );\n  return loading.promise;\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {defaultMsg} from '../internal/default-msg.js';\nimport {_installMsgImplementation} from './install.js';\n\n/**\n * Configuration parameters for lit-localize when in transform mode.\n */\nexport interface TransformConfiguration {\n  /**\n   * Required locale code in which source templates in this project are written,\n   * and the active locale.\n   */\n  sourceLocale: string;\n}\n\n/**\n * Set configuration parameters for lit-localize when in transform mode. Returns\n * an object with function:\n *\n * - `getLocale`: Return the active locale code.\n *\n * Throws if called more than once.\n */\nexport const configureTransformLocalization: ((\n  config: TransformConfiguration\n) => {getLocale: () => string}) & {\n  _LIT_LOCALIZE_CONFIGURE_TRANSFORM_LOCALIZATION_?: never;\n} = (config: TransformConfiguration) => {\n  _installMsgImplementation(defaultMsg);\n  const sourceLocale = config.sourceLocale;\n  return {\n    getLocale: () => sourceLocale,\n  };\n};\n"],
  "mappings": ";;;AAkBO,IAAM,sBAAsB;;;ACQnC,IAAM,OAAO,CACX,YACG,YACY;EACf,QAAQ;EACR;EACA;;AAGK,IAAM,MAAkD;AAExD,IAAM,cAAc,CAAC,QAC1B,OAAO,QAAQ,YAAY,YAAY;AAMlC,IAAM,uBAAuB,CAClC,SACA,QACA,eACE;AACF,MAAI,SAAS,QAAQ,CAAC;AACtB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAU,OAAO,aAAa,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC;AACvD,cAAU,QAAQ,CAAC;EACrB;AACA,SAAO;AACT;;;ACxCO,IAAM,aAAc,CAAC,aAC1B,YAAY,QAAQ,IAChB,qBAAqB,SAAS,SAAS,SAAS,MAAM,IACtD;;;ACLC,IAAI,MAAa;AAExB,IAAI,YAAY;AAUV,SAAU,0BAA0B,MAAW;AACnD,MAAI,WAAW;AACb,UAAM,IAAI,MAAM,0CAA0C;EAC5D;AACA,QAAM;AACN,cAAY;AACd;;;ACrBA,IAAM,qBAAN,MAAwB;EAGtB,YAAY,MAA4B;AAIvB,SAAA,4BAA4B,CAC3C,UACE;AACF,UAAI,MAAM,OAAO,WAAW,SAAS;AACnC,aAAK,KAAK,cAAa;MACzB;IACF;AATE,SAAK,OAAO;EACd;EAUA,gBAAa;AACX,WAAO,iBACL,qBACA,KAAK,yBAAyB;EAElC;EAEA,mBAAgB;AACd,WAAO,oBACL,qBACA,KAAK,yBAAyB;EAElC;;AA2BF,IAAM,2BAA2B,CAAC,SAChC,KAAK,cAAc,IAAI,mBAAmB,IAAI,CAAC;AAE1C,IAAM,0BAET;;;ACTG,IAAM,YACX,MACA,CACE,OACA,aACE;AACF,QAAM,eAAe,uBAAuB;AAC5C,SAAO;AACT;;;AC9DI,IAAO,WAAP,MAAe;EAMnB,cAAA;AAFA,SAAA,UAAU;AAGR,SAAK,UAAU,IAAI,QAAW,CAAC,SAAS,WAAU;AAChD,WAAK,WAAW;AAChB,WAAK,UAAU;IACjB,CAAC;EACH;EAEA,QAAQ,OAAQ;AACd,SAAK,UAAU;AACf,SAAK,SAAS,KAAK;EACrB;EAEA,OAAO,OAAY;AACjB,SAAK,UAAU;AACf,SAAK,QAAQ,KAAK;EACpB;;;;ACVF,IAAM,KAAe,CAAA;AACrB,SAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,KAAG,CAAC,KAAM,KAAK,IAAK,IAAI,SAAS,EAAE,KAAK,IAAI,IAAI,SAAS,EAAE;AAC7D;AAQM,SAAU,QAAQA,MAAW;AACjC,MAAI,KAAK,GACP,KAAK,MACL,KAAK,GACL,KAAK,OACL,KAAK,GACL,KAAK,OACL,KAAK,GACL,KAAK;AAEP,WAAS,IAAI,GAAG,IAAIA,KAAI,QAAQ,KAAK;AACnC,UAAMA,KAAI,WAAW,CAAC;AACtB,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,UAAM,MAAM;AACZ,UAAM,MAAM;AACZ,UAAM,OAAO;AACb,SAAK,KAAK;AACV,UAAM,OAAO;AACb,SAAK,KAAK;AACV,SAAM,MAAM,OAAO,MAAO;AAC1B,SAAK,KAAK;EACZ;AAEA,SACE,GAAG,MAAM,CAAC,IACV,GAAG,KAAK,GAAG,IACX,GAAG,MAAM,CAAC,IACV,GAAG,KAAK,GAAG,IACX,GAAG,MAAM,CAAC,IACV,GAAG,KAAK,GAAG,IACX,GAAG,MAAM,CAAC,IACV,GAAG,KAAK,GAAG;AAEf;;;AClDO,IAAM,iBAAiB;AAM9B,IAAM,cAAc;AAMpB,IAAM,gBAAgB;AA6BhB,SAAU,cACd,SACA,cAAqB;AAErB,UACG,eAAe,cAAc,iBAC9B,QACE,OAAO,YAAY,WAAW,UAAU,QAAQ,KAAK,cAAc,CAAC;AAG1E;;;ACpDA,IAAM,mBAAmB,oBAAI,QAAO;AACpC,IAAM,YAAY,oBAAI,IAAG;AAEnB,SAAU,WACdC,YACA,UACA,SAA+B;AAE/B,MAAIA,YAAW;AACb,UAAM,MAAK,mCAAS,OAAM,WAAW,QAAQ;AAC7C,UAAMC,aAAYD,WAAU,EAAE;AAC9B,QAAIC,YAAW;AACb,UAAI,OAAOA,eAAc,UAAU;AAEjC,eAAOA;MACT,WAAW,YAAYA,YAAW;AAQhC,eAAO;UACLA,WAAU;;;UAGT,SAA4B;UAC7BA,WAAU;QAAkB;MAEhC,OAAO;AAML,YAAI,QAAQ,iBAAiB,IAAIA,UAAS;AAC1C,YAAI,UAAU,QAAW;AACvB,kBAAQA,WAAU;AAClB,2BAAiB,IAAIA,YAAW,KAAK;QACvC;AACA,eAAO;UACL,GAAGA;UACH,QAAQ,MAAM,IAAI,CAAC,MAAO,SAA4B,OAAO,CAAC,CAAC;;MAEnE;IACF;EACF;AACA,SAAO,WAAW,QAAQ;AAC5B;AAEA,SAAS,WAAW,UAAsB;AACxC,QAAM,UAAU,OAAO,aAAa,WAAW,WAAW,SAAS;AACnE,MAAI,KAAK,UAAU,IAAI,OAAO;AAC9B,MAAI,OAAO,QAAW;AACpB,SAAK,cACH,SACA,OAAO,aAAa,YAAY,EAAE,YAAY,SAAS;AAEzD,cAAU,IAAI,SAAS,EAAE;EAC3B;AACA,SAAO;AACT;;;AC1BA,SAAS,oBAAoB,QAA+B;AAC1D,SAAO,cAAc,IAAI,YAAY,qBAAqB,EAAC,OAAM,CAAC,CAAC;AACrE;AAEA,IAAI,eAAe;AACnB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,UAAU,IAAI,SAAQ;AAG1B,QAAQ,QAAO;AACf,IAAI,YAAY;AAWT,IAAM,wBAKT,CAAC,WAAgC;AACnC,4BAA2B,CAAC,UAAwB,YAClD,WAAW,WAAW,UAAU,OAAO,CAAW;AACpD,iBAAe,eAAe,OAAO;AACrC,iBAAe,IAAI,IAAI,OAAO,aAAa;AAC3C,eAAa,IAAI,OAAO,YAAY;AACpC,eAAa,OAAO;AACpB,SAAO,EAAC,WAAW,UAAS;AAC9B;AAKA,IAAM,YAEF,MAAK;AACP,SAAO;AACT;AAgBA,IAAM,YAEF,CAAC,cAAqB;AACxB,MAAI,eAAe,iBAAiB,eAAe;AACjD,WAAO,QAAQ;EACjB;AACA,MAAI,CAAC,gBAAgB,CAAC,YAAY;AAChC,UAAM,IAAI,MAAM,gBAAgB;EAClC;AACA,MAAI,CAAC,aAAa,IAAI,SAAS,GAAG;AAChC,UAAM,IAAI,MAAM,qBAAqB;EACvC;AACA;AACA,QAAM,gBAAgB;AACtB,kBAAgB;AAChB,MAAI,QAAQ,SAAS;AACnB,cAAU,IAAI,SAAQ;EACxB;AACA,sBAAoB,EAAC,QAAQ,WAAW,eAAe,UAAS,CAAC;AACjE,QAAM,gBACJ,cAAc;;;;IAIV,QAAQ,QAAQ,EAAC,WAAW,OAAS,CAAC;MACtC,WAAW,SAAS;AAC1B,gBAAc,KACZ,CAAC,QAAO;AACN,QAAI,cAAc,eAAe;AAC/B,qBAAe;AACf,sBAAgB;AAChB,kBAAY,IAAI;AAChB,0BAAoB,EAAC,QAAQ,SAAS,aAAa,UAAS,CAAC;AAC7D,cAAQ,QAAO;IACjB;EAKF,GACA,CAAC,QAAO;AACN,QAAI,cAAc,eAAe;AAC/B,0BAAoB;QAClB,QAAQ;QACR,aAAa;QACb,cAAc,IAAI,SAAQ;OAC3B;AACD,cAAQ,OAAO,GAAG;IACpB;EACF,CAAC;AAEH,SAAO,QAAQ;AACjB;;;ACxIO,IAAM,iCAIT,CAAC,WAAkC;AACrC,4BAA0B,UAAU;AACpC,QAAMC,gBAAe,OAAO;AAC5B,SAAO;IACL,WAAW,MAAMA;;AAErB;",
  "names": ["str", "templates", "localized", "sourceLocale"]
}

{
  "version": 3,
  "sources": ["../../style-vendorizer/src/index.ts", "../../@twind/src/index.ts"],
  "sourcesContent": ["const enum CSSPrefixFlags {\n\t\"-webkit-\" = 1 << 0,\n\t\"-moz-\" = 1 << 1,\n\t\"-ms-\" = 1 << 2,\n}\n\nconst cssPropertyAliases = new Map([\n\t[\"align-self\", \"-ms-grid-row-align\"],\n\t[\"color-adjust\", \"-webkit-print-color-adjust\"],\n\t[\"column-gap\", \"grid-column-gap\"],\n\t[\"forced-color-adjust\", \"-ms-high-contrast-adjust\"],\n\t[\"gap\", \"grid-gap\"],\n\t[\"grid-template-columns\", \"-ms-grid-columns\"],\n\t[\"grid-template-rows\", \"-ms-grid-rows\"],\n\t[\"justify-self\", \"-ms-grid-column-align\"],\n\t[\"margin-inline-end\", \"-webkit-margin-end\"],\n\t[\"margin-inline-start\", \"-webkit-margin-start\"],\n\t[\"mask-border\", \"-webkit-mask-box-image\"],\n\t[\"mask-border-outset\", \"-webkit-mask-box-image-outset\"],\n\t[\"mask-border-slice\", \"-webkit-mask-box-image-slice\"],\n\t[\"mask-border-source\", \"-webkit-mask-box-image-source\"],\n\t[\"mask-border-repeat\", \"-webkit-mask-box-image-repeat\"],\n\t[\"mask-border-width\", \"-webkit-mask-box-image-width\"],\n\t[\"overflow-wrap\", \"word-wrap\"],\n\t[\"padding-inline-end\", \"-webkit-padding-end\"],\n\t[\"padding-inline-start\", \"-webkit-padding-start\"],\n\t[\"print-color-adjust\", \"color-adjust\"],\n\t[\"row-gap\", \"grid-row-gap\"],\n\t[\"scroll-margin-bottom\", \"scroll-snap-margin-bottom\"],\n\t[\"scroll-margin-left\", \"scroll-snap-margin-left\"],\n\t[\"scroll-margin-right\", \"scroll-snap-margin-right\"],\n\t[\"scroll-margin-top\", \"scroll-snap-margin-top\"],\n\t[\"scroll-margin\", \"scroll-snap-margin\"],\n\t[\"text-combine-upright\", \"-ms-text-combine-horizontal\"],\n]);\n\nexport function cssPropertyAlias(property: string): string | undefined {\n\treturn cssPropertyAliases.get(property);\n}\n\nexport function cssPropertyPrefixFlags(property: string): number {\n\tconst matches =\n\t\t/^(?:(text-(?:decoration$|e|or|si)|back(?:ground-cl|d|f)|box-d|mask(?:$|-[ispro]|-cl)|pr|hyphena|flex-d)|(tab-|column(?!-s)|text-align-l)|(ap)|u|hy)/i.exec(\n\t\t\tproperty,\n\t\t);\n\n\tif (!matches) return 0;\n\n\tif (matches[1]) return CSSPrefixFlags[\"-webkit-\"];\n\tif (matches[2]) return CSSPrefixFlags[\"-moz-\"];\n\tif (matches[3]) return CSSPrefixFlags[\"-moz-\"] | CSSPrefixFlags[\"-webkit-\"];\n\telse return CSSPrefixFlags[\"-ms-\"] | CSSPrefixFlags[\"-webkit-\"];\n}\n\nexport function cssValuePrefixFlags(property: string, value: string): number {\n\tconst matches =\n\t\t/^(?:(pos)|(cli)|(background-i)|(flex(?:$|-b)|(?:max-|min-)?(?:block-s|inl|he|widt))|dis)/i.exec(\n\t\t\tproperty,\n\t\t);\n\n\tif (!matches) return 0;\n\n\tif (matches[1]) {\n\t\t// position: \"sticky\"\n\t\treturn /^sti/i.test(value) ? CSSPrefixFlags[\"-webkit-\"] : 0;\n\t} else if (matches[2]) {\n\t\t// clip-path: \"path(…)\"\n\t\treturn /^pat/i.test(value) ? CSSPrefixFlags[\"-webkit-\"] : 0;\n\t} else if (matches[3]) {\n\t\t// background-image: \"image-set(…)\"\n\t\treturn /^image-/i.test(value) ? CSSPrefixFlags[\"-webkit-\"] : 0;\n\t} else if (matches[4]) {\n\t\t// flex(-basis)?|(max-|min-)?(width|inline-size|height|block-size): \"min-content\" | \"max-content\" | \"fit-content\"\n\t\treturn value[3] === \"-\" ? CSSPrefixFlags[\"-moz-\"] : 0;\n\t} else {\n\t\t// display: \"grid\" | \"inline-grid\"\n\t\treturn /^(?:inline-)?grid$/i.test(value) ? CSSPrefixFlags[\"-ms-\"] : 0;\n\t}\n}\n", "import type { Preset } from '@twind/core'\n\nimport { cssPropertyAlias, cssPropertyPrefixFlags, cssValuePrefixFlags } from 'style-vendorizer'\n\nconst CSSPrefixFlags = [\n  ['-webkit-', 1 << 0], // 0b001\n  ['-moz-', 1 << 1], // 0b010\n  ['-ms-', 1 << 2], // 0b100\n] as const\n\nexport default function presetAutoprefix(): Preset {\n  return ({ stringify }) => ({\n    stringify(property, value, context) {\n      let cssText = ''\n\n      // Resolve aliases, e.g. `gap` -> `grid-gap`\n      const propertyAlias = cssPropertyAlias(property)\n      if (propertyAlias) cssText += stringify(propertyAlias, value, context) + ';'\n\n      // Prefix properties, e.g. `backdrop-filter` -> `-webkit-backdrop-filter`\n      const propertyFlags = cssPropertyPrefixFlags(property)\n      const valueFlags = cssValuePrefixFlags(property, value)\n\n      for (const prefix of CSSPrefixFlags) {\n        if (propertyFlags & prefix[1]) {\n          cssText += stringify(prefix[0] + property, value, context) + ';'\n        }\n\n        if (valueFlags & prefix[1]) {\n          cssText += stringify(property, prefix[0] + value, context) + ';'\n        }\n      }\n\n      /* Include the standardized declaration last */\n      /* https://css-tricks.com/ordering-css3-properties/ */\n      return cssText + stringify(property, value, context)\n    },\n  })\n}\n"],
  "mappings": ";;;AAKA,IAAMA,IAAqB,oBAAIC,IAAI,CAC/B,CAAC,cAAc,oBAAA,GACf,CAAC,gBAAgB,4BAAA,GACjB,CAAC,cAAc,iBAAA,GACf,CAAC,uBAAuB,0BAAA,GACxB,CAAC,OAAO,UAAA,GACR,CAAC,yBAAyB,kBAAA,GAC1B,CAAC,sBAAsB,eAAA,GACvB,CAAC,gBAAgB,uBAAA,GACjB,CAAC,qBAAqB,oBAAA,GACtB,CAAC,uBAAuB,sBAAA,GACxB,CAAC,eAAe,wBAAA,GAChB,CAAC,sBAAsB,+BAAA,GACvB,CAAC,qBAAqB,8BAAA,GACtB,CAAC,sBAAsB,+BAAA,GACvB,CAAC,sBAAsB,+BAAA,GACvB,CAAC,qBAAqB,8BAAA,GACtB,CAAC,iBAAiB,WAAA,GAClB,CAAC,sBAAsB,qBAAA,GACvB,CAAC,wBAAwB,uBAAA,GACzB,CAAC,sBAAsB,cAAA,GACvB,CAAC,WAAW,cAAA,GACZ,CAAC,wBAAwB,2BAAA,GACzB,CAAC,sBAAsB,yBAAA,GACvB,CAAC,uBAAuB,0BAAA,GACxB,CAAC,qBAAqB,wBAAA,GACtB,CAAC,iBAAiB,oBAAA,GAClB,CAAC,wBAAwB,6BAAA,CAAA,CAAA;AAEvB,SAAUC,EAAiBC,IAAAA;AAC7B,SAAOH,EAAmBI,IAAID,EAAAA;AAAAA;AAE5B,SAAUE,EAAuBF,IAAAA;AACnC,MAAMG,KAAU,uJAAuJC,KAAKJ,EAAAA;AAC5K,SAAKG,KAEDA,GAAQ,CAAA,IAC0B,IAClCA,GAAQ,CAAA,IACuB,IAC/BA,GAAQ,CAAA,IACD,IAEA,IARA;AAAA;AAUC,SAAAE,EAAoBL,IAAkBM,IAAAA;AAClD,MAAMH,KAAU,4FAA4FC,KAAKJ,EAAAA;AACjH,SAAKG,KAEDA,GAAQ,CAAA,IAED,QAAQI,KAAKD,EAAAA,IAAoC,IAAE,IAErDH,GAAQ,CAAA,IAEN,QAAQI,KAAKD,EAAAA,IAAoC,IAAE,IAErDH,GAAQ,CAAA,IAEN,WAAWI,KAAKD,EAAAA,IAAoC,IAAE,IAExDH,GAAQ,CAAA,IAEO,QAAbG,GAAM,CAAA,IAAqC,IAAE,IAI7C,sBAAsBC,KAAKD,EAAAA,IAAgC,IAAE,IAnB7D;AAAA;;;ACjDf,IAAME,iBAAiB;EACrB;IAAC;IAAY;;;EACb;IAAC;IAAS;;;EACV;IAAC;IAAQ;;;AAGI,SAASC,mBAA2B;AACjD,SAAO,CAAC,EAAEC,UAAS,OAAQ;IACzBA,UAAUC,UAAUC,OAAOC,SAAS;AAClC,UAAIC,UAAU,IAGRC,gBAAgBC,EAAiBL,QAAAA;AACnCI,wBAAeD,WAAWJ,UAAUK,eAAeH,OAAOC,OAAAA,IAAW;AAGzE,UAAMI,gBAAgBC,EAAuBP,QAAAA,GACvCQ,aAAaC,EAAoBT,UAAUC,KAAAA;AAEjD,eAAWS,UAAUb,gBAAgB;AAC/BS,wBAAgBI,OAAO,CAAA,MACzBP,WAAWJ,UAAUW,OAAO,CAAA,IAAKV,UAAUC,OAAOC,OAAAA,IAAW;AAG3DM,qBAAaE,OAAO,CAAA,MACtBP,WAAWJ,UAAUC,UAAUU,OAAO,CAAA,IAAKT,OAAOC,OAAAA,IAAW;MAEjE;AAIA,aAAOC,UAAUJ,UAAUC,UAAUC,OAAOC,OAAAA;IAC9C;;AAEJ;",
  "names": ["cssPropertyAliases", "Map", "cssPropertyAlias", "property", "get", "cssPropertyPrefixFlags", "matches", "exec", "cssValuePrefixFlags", "value", "test", "CSSPrefixFlags", "presetAutoprefix", "stringify", "property", "value", "context", "cssText", "propertyAlias", "cssPropertyAlias", "propertyFlags", "cssPropertyPrefixFlags", "valueFlags", "cssValuePrefixFlags", "prefix"]
}

import {
  cssom,
  mo,
  noop,
  twind
} from "./chunk-O5ZJBDAH.js";
import "./chunk-2TUXWMP5.js";

// node_modules/@twind/with-web-components/with-web-components.dev.js
function install(config, isProduction = false) {
  let sheet = function() {
    if (supportsAdoptingStyleSheets) try {
      let sheet2 = cssom(new CSSStyleSheet());
      sheet2.connect = (element) => {
        let shadowRoot = getShadowRoot(element);
        shadowRoot.adoptedStyleSheets = [
          ...shadowRoot.adoptedStyleSheets,
          sheet2.target
        ];
      };
      sheet2.disconnect = noop;
      return sheet2;
    } catch {
    }
    let style = document.createElement("style");
    style.media = "not all";
    document.head.prepend(style);
    let sheets = [
      cssom(style)
    ], sheetsByElement = /* @__PURE__ */ new WeakMap();
    return {
      get target() {
        return sheets[0].target;
      },
      snapshot() {
        let restores = sheets.map((sheet2) => sheet2.snapshot());
        return () => restores.forEach((restore) => restore());
      },
      clear() {
        sheets.forEach((sheets2) => sheets2.clear());
      },
      destroy() {
        sheets.forEach((sheets2) => sheets2.destroy());
      },
      insert(css, index, rule) {
        sheets[0].insert(css, index, rule);
        let cssRule = this.target.cssRules[index];
        sheets.forEach((sheets2, notFirst) => notFirst && sheets2.target.insertRule(cssRule.cssText, index));
      },
      resume(addClassName, insert) {
        return sheets[0].resume(addClassName, insert);
      },
      connect(element) {
        let style2 = document.createElement("style");
        getShadowRoot(element).appendChild(style2);
        let sheet2 = cssom(style2), { cssRules } = this.target;
        for (let i = 0; i < cssRules.length; i++) sheet2.target.insertRule(cssRules[i].cssText, i);
        sheets.push(sheet2);
        sheetsByElement.set(element, sheet2);
      },
      disconnect(element) {
        let index = sheets.indexOf(sheetsByElement.get(element));
        index >= 0 && sheets.splice(index, 1);
      }
    };
  }(), tw = twind({
    ...config,
    // in production use short hashed class names
    hash: config.hash ?? isProduction
  }, sheet), observer = mo(tw);
  return function install$(BaseElement) {
    return class WithTwindElement extends BaseElement {
      connectedCallback() {
        var _a;
        (_a = super.connectedCallback) == null ? void 0 : _a.call(this);
        sheet.connect(this);
        observer.observe(getShadowRoot(this));
      }
      disconnectedCallback() {
        var _a;
        sheet.disconnect(this);
        (_a = super.disconnectedCallback) == null ? void 0 : _a.call(this);
      }
      constructor(...args) {
        super(...args);
        this.tw = tw;
      }
    };
  };
}
var supportsAdoptingStyleSheets = "undefined" != typeof ShadowRoot && ("undefined" == typeof ShadyCSS || ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
function getShadowRoot(element) {
  return element.shadowRoot || element.attachShadow({
    mode: "open"
  });
}
export {
  install as default
};
//# sourceMappingURL=@twind_with-web-components.js.map

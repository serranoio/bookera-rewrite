{
  "version": 3,
  "sources": ["../../@zenfs/dom/dist/utils.js", "../../@zenfs/dom/dist/access.js", "../../@zenfs/dom/dist/IndexedDB.js", "../../@zenfs/dom/dist/storage.js", "../../@zenfs/dom/dist/xml.js"],
  "sourcesContent": ["import { ErrnoError, Errno } from '@zenfs/core';\n/**\n * Converts a DOMException into an Errno\n * @see https://developer.mozilla.org/Web/API/DOMException\n */\nfunction errnoForDOMException(ex) {\n    switch (ex.name) {\n        case 'IndexSizeError':\n        case 'HierarchyRequestError':\n        case 'InvalidCharacterError':\n        case 'InvalidStateError':\n        case 'SyntaxError':\n        case 'NamespaceError':\n        case 'TypeMismatchError':\n        case 'ConstraintError':\n        case 'VersionError':\n        case 'URLMismatchError':\n        case 'InvalidNodeTypeError':\n            return 'EINVAL';\n        case 'WrongDocumentError':\n            return 'EXDEV';\n        case 'NoModificationAllowedError':\n        case 'InvalidModificationError':\n        case 'InvalidAccessError':\n        case 'SecurityError':\n        case 'NotAllowedError':\n            return 'EACCES';\n        case 'NotFoundError':\n            return 'ENOENT';\n        case 'NotSupportedError':\n            return 'ENOTSUP';\n        case 'InUseAttributeError':\n            return 'EBUSY';\n        case 'NetworkError':\n            return 'ENETDOWN';\n        case 'AbortError':\n            return 'EINTR';\n        case 'QuotaExceededError':\n            return 'ENOSPC';\n        case 'TimeoutError':\n            return 'ETIMEDOUT';\n        case 'ReadOnlyError':\n            return 'EROFS';\n        case 'DataCloneError':\n        case 'EncodingError':\n        case 'NotReadableError':\n        case 'DataError':\n        case 'TransactionInactiveError':\n        case 'OperationError':\n        case 'UnknownError':\n        default:\n            return 'EIO';\n    }\n}\n/**\n * Handles converting errors, then rethrowing them\n * @internal\n */\nexport function convertException(ex, path, syscall) {\n    if (ex instanceof ErrnoError) {\n        return ex;\n    }\n    const code = ex instanceof DOMException ? Errno[errnoForDOMException(ex)] : Errno.EIO;\n    const error = new ErrnoError(code, ex.message, path, syscall);\n    error.stack = ex.stack;\n    error.cause = ex.cause;\n    return error;\n}\n", "import { Async, constants, Errno, ErrnoError, FileSystem, InMemory, PreloadFile, Stats } from '@zenfs/core';\nimport { basename, dirname, join } from '@zenfs/core/vfs/path.js';\nimport { convertException } from './utils.js';\nfunction isResizable(buffer) {\n    if (buffer instanceof ArrayBuffer)\n        return buffer.resizable;\n    if (buffer instanceof SharedArrayBuffer)\n        return buffer.growable;\n    return false;\n}\nexport class WebAccessFS extends Async(FileSystem) {\n    constructor(handle) {\n        super();\n        this._handles = new Map();\n        /**\n         * @hidden\n         */\n        this._sync = InMemory.create({ name: 'accessfs-cache' });\n        this._handles.set('/', handle);\n    }\n    metadata() {\n        return {\n            ...super.metadata(),\n            name: 'WebAccess',\n            noResizableBuffers: true,\n            // Not really, but we don't support opening directories so this prevent the VFS from trying\n            features: ['setid'],\n        };\n    }\n    async sync(path, data) {\n        await this.writeFile(path, data);\n    }\n    async rename(oldPath, newPath) {\n        const handle = await this.getHandle(oldPath);\n        if (handle instanceof FileSystemDirectoryHandle) {\n            const files = await this.readdir(oldPath);\n            await this.mkdir(newPath);\n            if (!files.length) {\n                await this.unlink(oldPath);\n                return;\n            }\n            for (const file of files) {\n                await this.rename(join(oldPath, file), join(newPath, file));\n                await this.unlink(oldPath);\n            }\n            return;\n        }\n        if (!(handle instanceof FileSystemFileHandle)) {\n            throw new ErrnoError(Errno.ENOTSUP, 'Not a file or directory handle', oldPath, 'rename');\n        }\n        const oldFile = await handle.getFile().catch((ex) => {\n            throw convertException(ex, oldPath, 'rename');\n        }), destFolder = await this.getHandle(dirname(newPath));\n        if (!(destFolder instanceof FileSystemDirectoryHandle)) {\n            return;\n        }\n        const newFile = await destFolder.getFileHandle(basename(newPath), { create: true }).catch((ex) => {\n            throw convertException(ex, newPath, 'rename');\n        });\n        const writable = await newFile.createWritable();\n        await writable.write(await oldFile.arrayBuffer());\n        await writable.close();\n        await this.unlink(oldPath);\n    }\n    async writeFile(path, data) {\n        if (isResizable(data.buffer)) {\n            throw new ErrnoError(Errno.EINVAL, 'Resizable buffers can not be written', path, 'write');\n        }\n        const handle = await this.getHandle(dirname(path));\n        if (!(handle instanceof FileSystemDirectoryHandle)) {\n            return;\n        }\n        const file = await handle.getFileHandle(basename(path), { create: true });\n        const writable = await file.createWritable();\n        await writable.write(data);\n        await writable.close();\n    }\n    async createFile(path, flag) {\n        await this.writeFile(path, new Uint8Array());\n        return this.openFile(path, flag);\n    }\n    async stat(path) {\n        const handle = await this.getHandle(path);\n        if (!handle) {\n            throw ErrnoError.With('ENOENT', path, 'stat');\n        }\n        if (handle instanceof FileSystemDirectoryHandle) {\n            return new Stats({ mode: 0o777 | constants.S_IFDIR, size: 4096 });\n        }\n        if (handle instanceof FileSystemFileHandle) {\n            const { lastModified, size } = await handle.getFile();\n            return new Stats({ mode: 0o777 | constants.S_IFREG, size, mtimeMs: lastModified });\n        }\n        throw new ErrnoError(Errno.EBADE, 'Handle is not a directory or file', path, 'stat');\n    }\n    async openFile(path, flag) {\n        const handle = await this.getHandle(path);\n        if (!(handle instanceof FileSystemFileHandle)) {\n            throw ErrnoError.With('EISDIR', path, 'openFile');\n        }\n        const file = await handle.getFile().catch((ex) => {\n            throw convertException(ex, path, 'openFile');\n        });\n        const data = new Uint8Array(await file.arrayBuffer());\n        const stats = new Stats({ mode: 0o777 | constants.S_IFREG, size: file.size, mtimeMs: file.lastModified });\n        return new PreloadFile(this, path, flag, stats, data);\n    }\n    async unlink(path) {\n        const handle = await this.getHandle(dirname(path));\n        if (!(handle instanceof FileSystemDirectoryHandle)) {\n            throw ErrnoError.With('ENOTDIR', dirname(path), 'unlink');\n        }\n        await handle.removeEntry(basename(path), { recursive: true }).catch((ex) => {\n            throw convertException(ex, path, 'unlink');\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async link(srcpath) {\n        return;\n    }\n    async rmdir(path) {\n        return this.unlink(path);\n    }\n    async mkdir(path, mode, options) {\n        const existingHandle = await this.getHandle(path).catch((ex) => {\n            if (ex.code != 'ENOENT') {\n                throw ex;\n            }\n        });\n        if (existingHandle) {\n            throw ErrnoError.With('EEXIST', path, 'mkdir');\n        }\n        const handle = await this.getHandle(dirname(path));\n        if (!(handle instanceof FileSystemDirectoryHandle)) {\n            throw ErrnoError.With('ENOTDIR', path, 'mkdir');\n        }\n        await handle.getDirectoryHandle(basename(path), { create: true });\n    }\n    async readdir(path) {\n        const handle = await this.getHandle(path);\n        if (!(handle instanceof FileSystemDirectoryHandle)) {\n            throw ErrnoError.With('ENOTDIR', path, 'readdir');\n        }\n        const entries = [];\n        for await (const k of handle.keys()) {\n            entries.push(k);\n        }\n        return entries;\n    }\n    async getHandle(path) {\n        if (this._handles.has(path)) {\n            return this._handles.get(path);\n        }\n        let walked = '/';\n        for (const part of path.split('/').slice(1)) {\n            const handle = this._handles.get(walked);\n            if (!(handle instanceof FileSystemDirectoryHandle)) {\n                throw ErrnoError.With('ENOTDIR', walked, 'getHandle');\n            }\n            walked = join(walked, part);\n            const child = await handle.getDirectoryHandle(part).catch((ex) => {\n                switch (ex.name) {\n                    case 'TypeMismatchError':\n                        return handle.getFileHandle(part).catch((ex) => {\n                            //throw convertException(ex, walked, 'getHandle');\n                        });\n                    case 'TypeError':\n                        throw new ErrnoError(Errno.ENOENT, ex.message, walked, 'getHandle');\n                    default:\n                        throw convertException(ex, walked, 'getHandle');\n                }\n            });\n            if (child)\n                this._handles.set(walked, child);\n        }\n        return this._handles.get(path);\n    }\n}\nconst _WebAccess = {\n    name: 'WebAccess',\n    options: {\n        handle: { type: 'object', required: true },\n    },\n    isAvailable() {\n        return typeof FileSystemHandle == 'function';\n    },\n    create(options) {\n        return new WebAccessFS(options.handle);\n    },\n};\nexport const WebAccess = _WebAccess;\n", "import { Async, AsyncTransaction, ErrnoError, InMemory, StoreFS } from '@zenfs/core';\nimport { convertException } from './utils.js';\nfunction wrap(request) {\n    return new Promise((resolve, reject) => {\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = e => {\n            e.preventDefault();\n            reject(convertException(request.error));\n        };\n    });\n}\n/**\n * @hidden\n */\nexport class IndexedDBTransaction extends AsyncTransaction {\n    constructor(tx, store) {\n        super(store);\n        this.tx = tx;\n        this.store = store;\n        this._idb = tx.objectStore(store.name);\n    }\n    async keys() {\n        return (await wrap(this._idb.getAllKeys())).filter(k => typeof k == 'string').map(k => BigInt(k));\n    }\n    get(key) {\n        return wrap(this._idb.get(key.toString()));\n    }\n    async set(key, data) {\n        await wrap(this._idb.put(data, key.toString()));\n    }\n    remove(key) {\n        return wrap(this._idb.delete(key.toString()));\n    }\n    async commit() {\n        if (this.done) {\n            return;\n        }\n        const { promise, resolve, reject } = Promise.withResolvers();\n        this.done = true;\n        this.tx.oncomplete = () => resolve();\n        this.tx.onerror = () => reject(convertException(this.tx.error));\n        this.tx.commit();\n        return promise;\n    }\n    async abort() {\n        if (this.done) {\n            return;\n        }\n        this.done = true;\n        const { promise, resolve, reject } = Promise.withResolvers();\n        this.tx.onabort = () => resolve();\n        this.tx.onerror = () => reject(convertException(this.tx.error));\n        this.tx.abort();\n        return promise;\n    }\n}\nasync function createDB(name, indexedDB = globalThis.indexedDB) {\n    const req = indexedDB.open(name);\n    req.onupgradeneeded = () => {\n        const db = req.result;\n        // This should never happen; we're at version 1. Why does another database exist?\n        if (db.objectStoreNames.contains(name)) {\n            db.deleteObjectStore(name);\n        }\n        db.createObjectStore(name);\n    };\n    const result = await wrap(req);\n    return result;\n}\nexport class IndexedDBStore {\n    constructor(db) {\n        this.db = db;\n    }\n    sync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'IndexedDBStore.sync');\n    }\n    get name() {\n        return this.db.name;\n    }\n    clear() {\n        return wrap(this.db.transaction(this.name, 'readwrite').objectStore(this.name).clear());\n    }\n    clearSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'IndexedDBStore.clearSync');\n    }\n    transaction() {\n        const tx = this.db.transaction(this.name, 'readwrite');\n        return new IndexedDBTransaction(tx, this);\n    }\n}\n/**\n * A file system that uses the IndexedDB key value file system.\n */\nconst _IndexedDB = {\n    name: 'IndexedDB',\n    options: {\n        storeName: {\n            type: 'string',\n            required: false,\n        },\n        idbFactory: {\n            type: 'object',\n            required: false,\n        },\n    },\n    async isAvailable(idbFactory = globalThis.indexedDB) {\n        try {\n            if (!(idbFactory instanceof IDBFactory)) {\n                return false;\n            }\n            const req = idbFactory.open('__zenfs_test');\n            await wrap(req);\n            return true;\n        }\n        catch {\n            return false;\n        }\n        finally {\n            idbFactory.deleteDatabase('__zenfs_test');\n        }\n    },\n    async create(options) {\n        const db = await createDB(options.storeName || 'zenfs', options.idbFactory);\n        const store = new IndexedDBStore(db);\n        const fs = new (Async(StoreFS))(store);\n        if (!options?.disableAsyncCache) {\n            fs._sync = InMemory.create({ name: 'idb-cache' });\n        }\n        return fs;\n    },\n};\nexport const IndexedDB = _IndexedDB;\n", "import { ErrnoError, Errno, SimpleTransaction, StoreFS, decodeRaw, encodeRaw } from '@zenfs/core';\n/**\n * A synchronous key-value store backed by Storage.\n */\nexport class WebStorageStore {\n    get name() {\n        return WebStorage.name;\n    }\n    constructor(storage) {\n        this.storage = storage;\n    }\n    /* node:coverage ignore next 10 */\n    clear() {\n        this.storage.clear();\n    }\n    clearSync() {\n        this.storage.clear();\n    }\n    async sync() { }\n    transaction() {\n        return new SimpleTransaction(this);\n    }\n    keys() {\n        return Object.keys(this.storage).map(k => BigInt(k));\n    }\n    get(key) {\n        const data = this.storage.getItem(key.toString());\n        if (typeof data != 'string') {\n            return;\n        }\n        return encodeRaw(data);\n    }\n    set(key, data) {\n        try {\n            this.storage.setItem(key.toString(), decodeRaw(data));\n        }\n        catch {\n            throw new ErrnoError(Errno.ENOSPC, 'Storage is full.');\n        }\n    }\n    delete(key) {\n        try {\n            this.storage.removeItem(key.toString());\n        }\n        catch (e) {\n            throw new ErrnoError(Errno.EIO, 'Unable to delete key ' + key + ': ' + e);\n        }\n    }\n}\n/**\n * A synchronous file system backed by a `Storage` (e.g. localStorage).\n */\nconst _WebStorage = {\n    name: 'WebStorage',\n    options: {\n        storage: { type: 'object', required: false },\n    },\n    /**\n     * @todo Consider replacing `instanceof` with a duck-typing check?\n     */\n    isAvailable(storage = globalThis.localStorage) {\n        return storage instanceof globalThis.Storage;\n    },\n    create({ storage = globalThis.localStorage }) {\n        return new StoreFS(new WebStorageStore(storage));\n    },\n};\nexport const WebStorage = _WebStorage;\n", "import { constants, decodeRaw, encodeRaw, Errno, ErrnoError, FileSystem, PreloadFile, Stats, Sync } from '@zenfs/core';\nimport { basename, dirname } from '@zenfs/core/vfs/path.js';\nconst statsLikeKeys = ['size', 'mode', 'atimeMs', 'mtimeMs', 'ctimeMs', 'birthtimeMs', 'uid', 'gid', 'ino', 'nlink'];\nfunction get_stats(node) {\n    const stats = {};\n    for (const key of statsLikeKeys) {\n        const value = node.getAttribute(key);\n        stats[key] = value != null ? parseInt(value, 16) : undefined;\n    }\n    return new Stats(stats);\n}\nfunction set_stats(node, stats) {\n    for (const key of statsLikeKeys) {\n        if (stats[key] != undefined) {\n            node.setAttribute(key, stats[key].toString(16));\n        }\n    }\n}\nfunction get_paths(node, contents = false) {\n    let paths;\n    try {\n        const raw = contents ? node.textContent : node.getAttribute('paths');\n        paths = JSON.parse(raw || '[]');\n    }\n    catch {\n        paths = [];\n    }\n    return paths;\n}\nexport class XMLFS extends Sync(FileSystem) {\n    constructor(\n    /**\n     * @inheritdoc XMLOptions.root\n     */\n    root = new DOMParser().parseFromString('<fs></fs>', 'application/xml').documentElement) {\n        super();\n        this.root = root;\n        try {\n            this.mkdirSync('/', 0o777, { uid: 0, gid: 0 });\n        }\n        catch (e) {\n            const error = e;\n            if (error.code != 'EEXIST')\n                throw error;\n        }\n    }\n    metadata() {\n        return { ...super.metadata(), features: ['setid'] };\n    }\n    renameSync(oldPath, newPath) {\n        const node = this.get('rename', oldPath);\n        this.remove('rename', node, oldPath);\n        this.add('rename', node, newPath);\n    }\n    statSync(path) {\n        return get_stats(this.get('stat', path));\n    }\n    openFileSync(path, flag) {\n        const node = this.get('openFile', path);\n        return new PreloadFile(this, path, flag, get_stats(node), encodeRaw(node.textContent));\n    }\n    createFileSync(path, flag, mode, { uid, gid }) {\n        const parent = this.statSync(dirname(path));\n        const stats = new Stats({\n            mode: mode | constants.S_IFREG,\n            uid: parent.mode & constants.S_ISUID ? parent.uid : uid,\n            gid: parent.mode & constants.S_ISGID ? parent.gid : gid,\n        });\n        this.create('createFile', path, stats);\n        return new PreloadFile(this, path, flag, stats);\n    }\n    unlinkSync(path) {\n        const node = this.get('unlink', path);\n        if (get_stats(node).isDirectory())\n            throw ErrnoError.With('EISDIR', path, 'unlink');\n        this.remove('unlink', node, path);\n    }\n    rmdirSync(path) {\n        const node = this.get('rmdir', path);\n        if (node.textContent?.length)\n            throw ErrnoError.With('ENOTEMPTY', path, 'rmdir');\n        if (!get_stats(node).isDirectory())\n            throw ErrnoError.With('ENOTDIR', path, 'rmdir');\n        this.remove('rmdir', node, path);\n    }\n    mkdirSync(path, mode, { uid, gid }) {\n        const parent = this.statSync(dirname(path));\n        const node = this.create('mkdir', path, {\n            mode: mode | constants.S_IFDIR,\n            uid: parent.mode & constants.S_ISUID ? parent.uid : uid,\n            gid: parent.mode & constants.S_ISGID ? parent.gid : gid,\n        });\n        node.textContent = '[]';\n    }\n    readdirSync(path) {\n        const node = this.get('readdir', path);\n        if (!get_stats(node).isDirectory())\n            throw ErrnoError.With('ENOTDIR', path, 'rmdir');\n        try {\n            return JSON.parse(node.textContent);\n        }\n        catch (e) {\n            throw new ErrnoError(Errno.EIO, 'Invalid directory listing: ' + e, path, 'readdir');\n        }\n    }\n    linkSync(target, link) {\n        const node = this.get('link', target);\n        this.add('link', node, link);\n    }\n    syncSync(path, data, stats) {\n        const node = this.get('sync', path);\n        node.textContent = decodeRaw(data);\n        set_stats(node, stats);\n    }\n    toString() {\n        return new XMLSerializer().serializeToString(this.root);\n    }\n    get(syscall, path) {\n        const nodes = this.root.children;\n        if (!nodes)\n            throw ErrnoError.With('EIO', path, syscall);\n        for (let i = 0; i < nodes.length; i++) {\n            if (get_paths(nodes[i]).includes(path))\n                return nodes[i];\n        }\n        throw ErrnoError.With('ENOENT', path, syscall);\n    }\n    create(syscall, path, stats) {\n        if (this.existsSync(path))\n            throw ErrnoError.With('EEXIST', path, syscall);\n        const node = document.createElement('file');\n        this.add(syscall, node, path);\n        set_stats(node, new Stats({\n            ...stats,\n            uid: stats.mode,\n        }));\n        this.root.append(node);\n        return node;\n    }\n    add(syscall, node, path, contents = false) {\n        const paths = get_paths(node, contents);\n        paths.push(path);\n        if (contents) {\n            node.textContent = JSON.stringify(paths);\n            return;\n        }\n        node.setAttribute('paths', JSON.stringify(paths));\n        node.setAttribute('nlink', paths.length.toString(16));\n        if (path != '/') {\n            const parent = this.get(syscall, dirname(path));\n            this.add(syscall, parent, basename(path), true);\n        }\n    }\n    remove(syscall, node, path, contents = false) {\n        const paths = get_paths(node, contents);\n        const i = paths.indexOf(path);\n        if (i == -1)\n            return;\n        paths.splice(i, 1);\n        if (contents) {\n            node.textContent = JSON.stringify(paths);\n            return;\n        }\n        if (!paths.length) {\n            node.remove();\n        }\n        else {\n            node.setAttribute('paths', JSON.stringify(paths));\n            node.setAttribute('nlink', paths.length.toString(16));\n        }\n        if (path != '/') {\n            const parent = this.get(syscall, dirname(path));\n            this.remove(syscall, parent, basename(path), true);\n        }\n    }\n}\nconst _XML = {\n    name: 'XML',\n    options: {\n        root: { type: 'object', required: false },\n    },\n    isAvailable() {\n        return true;\n    },\n    create(options) {\n        return new XMLFS(options.root);\n    },\n};\n/**\n * @experimental\n */\nexport const XML = _XML;\n"],
  "mappings": "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",
  "names": ["ex"]
}

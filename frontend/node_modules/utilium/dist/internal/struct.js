// @ts-expect-error 2322
Symbol.struct_init ||= Symbol('struct_init');
// @ts-expect-error 2322
Symbol.struct_metadata ||= Symbol('struct_metadata');
/** @deprecated */
export const init = Symbol.struct_init;
/** @deprecated */
export const metadata = Symbol.struct_metadata;
export function isValidMetadata(arg) {
    return arg != null && typeof arg == 'object' && Symbol.struct_metadata in arg;
}
/**
 * Polyfill Symbol.metadata
 * @see https://github.com/microsoft/TypeScript/issues/53461
 */
Symbol.metadata ??= Symbol.for('Symbol.metadata');
/**
 * Polyfill context.metadata
 * @see https://github.com/microsoft/TypeScript/issues/53461
 */
export function _polyfill_contextMetadata(target) {
    if (!Symbol?.metadata) {
        return;
    }
    if (Symbol.metadata in target) {
        return;
    }
    Object.defineProperty(target, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Object.create(null),
    });
}
/**
 * Gets a reference to Symbol.metadata, even on platforms that do not expose it globally (like Node)
 */
export function symbol_metadata(arg) {
    const symbol_metadata = Symbol.metadata || Object.getOwnPropertySymbols(arg).find(s => s.description == 'Symbol.metadata');
    _polyfill_contextMetadata(arg);
    if (!symbol_metadata) {
        throw new ReferenceError('Could not get a reference to Symbol.metadata');
    }
    return symbol_metadata;
}
export function isStatic(arg) {
    return typeof arg == 'function' && symbol_metadata(arg) in arg && isValidMetadata(arg[symbol_metadata(arg)]);
}
export function isInstance(arg) {
    return arg != null && typeof arg == 'object' && isStatic(arg.constructor);
}
export function checkInstance(arg) {
    if (!isInstance(arg)) {
        throw new TypeError((typeof arg == 'function' ? arg.name : typeof arg == 'object' && arg ? arg.constructor.name : arg) + ' is not a struct instance');
    }
}
export function isStruct(arg) {
    return isInstance(arg) || isStatic(arg);
}
export function checkStruct(arg) {
    if (!isStruct(arg)) {
        throw new TypeError((typeof arg == 'function' ? arg.name : typeof arg == 'object' && arg ? arg.constructor.name : arg) + ' is not a struct');
    }
}

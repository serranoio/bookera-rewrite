import { Stats, type StatsLike } from '../vfs/stats.js';
import { type V_Context } from './contexts.js';
/**
 * Root inode
 * @hidden
 */
export declare const rootIno = 0;
declare class Attribute {
    protected keySize: number;
    protected valueSize: number;
    protected _key: string;
    get key(): string;
    set key(value: string);
    protected _value: Uint8Array;
    get value(): Uint8Array;
    set value(value: Uint8Array);
    constructor(key?: string, value?: Uint8Array);
}
/**
 * Extended attributes
 * @category Internals
 * @internal
 */
export declare class Attributes {
    size: number;
    data: Attribute[];
    has(name: string): boolean;
    get(name: string): Attribute | undefined;
    set(name: string, value: Uint8Array): void;
    remove(name: string): boolean;
    keys(): string[];
    values(): Uint8Array[];
    entries(): [string, Uint8Array][];
}
/**
 * @internal @hidden
 */
export interface InodeFields {
    data?: number;
    flags?: number;
    version?: number;
}
/**
 * @category Internals
 * @internal
 */
export interface InodeLike extends StatsLike<number>, InodeFields {
    attributes?: Attributes;
}
/**
 * @internal @hidden
 */
export declare const _inode_fields: readonly ["ino", "data", "size", "mode", "flags", "nlink", "uid", "gid", "atimeMs", "birthtimeMs", "mtimeMs", "ctimeMs", "version"];
/**
 * Represents which version of the `Inode` format we are on.
 * 1. 58 bytes. The first member was called `ino` but used as the ID for data.
 * 2. 66 bytes. Renamed the first member from `ino` to `data` and added a separate `ino` field
 * 3. 72 bytes. Changed the ID fields from 64 to 32 bits and added `flags`.
 * 4. (current) Added extended attributes. At least 128 bytes.
 * @internal @hidden
 */
export declare const _inode_version = 4;
/**
 * Inode flags (FS_IOC_GETFLAGS / FS_IOC_SETFLAGS)
 * @see `FS_*_FL` in `include/uapi/linux/fs.h` (around L250)
 * @experimental
 */
export declare enum InodeFlags {
    /** Secure deletion */
    SecureRm = 1,
    /** Undelete */
    Undelete = 2,
    /** Compress file */
    Compress = 4,
    /** Synchronous updates */
    Sync = 8,
    /** Immutable file */
    Immutable = 16,
    /** Writes to file may only append */
    Append = 32,
    /** do not dump file */
    NoDump = 64,
    /** do not update atime */
    NoAtime = 128,
    Dirty = 256,
    /** One or more compressed clusters */
    CompressBlk = 512,
    /** Don't compress */
    NoCompress = 1024,
    /** Encrypted file */
    Encrypt = 2048,
    /** btree format dir */
    Btree = 4096,
    /** hash-indexed directory */
    Index = 4096,
    /** AFS directory */
    IMagic = 8192,
    /** Reserved for ext3 */
    JournalData = 16384,
    /** file tail should not be merged */
    NoTail = 32768,
    /** dirsync behaviour (directories only) */
    DirSync = 65536,
    /** Top of directory hierarchies*/
    TopDir = 131072,
    /** Reserved for ext4 */
    HugeFile = 262144,
    /** Extents */
    Extent = 524288,
    /** Verity protected inode */
    Verity = 1048576,
    /** Inode used for large EA */
    EaInode = 2097152,
    /** Reserved for ext4 */
    EofBlocks = 4194304,
    /** Do not cow file */
    NoCow = 8388608,
    /** Inode is DAX */
    Dax = 33554432,
    /** Reserved for ext4 */
    InlineData = 268435456,
    /** Create with parents projid */
    ProjInherit = 536870912,
    /** Folder is case insensitive */
    CaseFold = 1073741824,
    /** reserved for ext2 lib */
    Reserved = 2147483648
}
/** User visible flags */
export declare const userVisibleFlags = 253951;
/** User modifiable flags */
export declare const userModifiableFlags = 229631;
/**
 * Generic inode definition that can easily be serialized.
 * @category Internals
 * @internal
 */
export declare class Inode implements InodeLike {
    constructor(data?: Uint8Array | Readonly<Partial<InodeLike>>);
    data: number;
    /** For future use */
    __data_old: number;
    size: number;
    mode: number;
    nlink: number;
    uid: number;
    gid: number;
    atimeMs: number;
    birthtimeMs: number;
    mtimeMs: number;
    /**
     * The time the inode was changed.
     *
     * This is automatically updated whenever changed are made using `update()`.
     */
    ctimeMs: number;
    ino: number;
    /** For future use */
    __ino_old: number;
    flags: number;
    /** For future use */
    protected __after_flags: number;
    /**
     * The "version" of the inode/data.
     *
     * Unrelated to the inode format!
     */
    version: number;
    /** Pad to 128 bytes */
    protected __padding: never[];
    attributes: Attributes;
    toString(): string;
    toJSON(): InodeLike;
    /**
     * Handy function that converts the Inode to a Node Stats object.
     */
    toStats(): Stats;
    /**
     * Updates the Inode using information from the stats object. Used by file
     * systems at sync time, e.g.:
     * - Program opens file and gets a File object.
     * - Program mutates file. File object is responsible for maintaining
     *   metadata changes locally -- typically in a Stats object.
     * - Program closes file. File object's metadata changes are synced with the
     *   file system.
     * @returns whether any changes have occurred.
     */
    update(data?: Partial<Readonly<InodeLike>>): boolean;
}
export declare function isFile(metadata: {
    mode: number;
}): boolean;
export declare function isDirectory(metadata: {
    mode: number;
}): boolean;
export declare function isSymbolicLink(metadata: {
    mode: number;
}): boolean;
export declare function isSocket(metadata: {
    mode: number;
}): boolean;
export declare function isBlockDevice(metadata: {
    mode: number;
}): boolean;
export declare function isCharacterDevice(metadata: {
    mode: number;
}): boolean;
export declare function isFIFO(metadata: {
    mode: number;
}): boolean;
/**
 * Checks if a given user/group has access to this item
 * @param access The requested access, combination of `W_OK`, `R_OK`, and `X_OK`
 * @internal
 */
export declare function hasAccess($: V_Context, inode: Pick<InodeLike, 'mode' | 'uid' | 'gid'>, access: number): boolean;
export {};

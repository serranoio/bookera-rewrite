import '@zenfs/core/polyfills.js';
/**
 * Represents a key-value store.
 */
export interface Store {
    /**
     * The name of the store.
     */
    readonly name: string;
    /**
     * Syncs the store
     */
    sync(): Promise<void>;
    /**
     * Empties the store completely.
     */
    clear(): Promise<void> | void;
    /**
     * Empties the store completely.
     */
    clearSync(): void;
    /**
     * Begins a new transaction.
     */
    transaction(): Transaction;
}
/**
 * A transaction for a store.
 */
export declare abstract class Transaction<T extends Store = Store> {
    protected store: T;
    constructor(store: T);
    /**
     * Whether the transaction was committed or aborted
     */
    protected done: boolean;
    /**
     * Gets all of the keys
     */
    abstract keys(): Promise<Iterable<bigint>>;
    /**
     * Gets all of the keys
     */
    abstract keysSync(): Iterable<bigint>;
    /**
     * Retrieves data.
     * @param id The key to look under for data.
     */
    abstract get(id: bigint): Promise<Uint8Array>;
    /**
     * Retrieves data.
     * Throws an error if an error occurs or if the key does not exist.
     * @param id The key to look under for data.
     * @return The data stored under the key, or undefined if not present.
     */
    abstract getSync(id: bigint): Uint8Array;
    /**
     * Adds the data to the store under an id. Overwrites any existing data.
     * @param id The key to add the data under.
     * @param data The data to add to the store.
     */
    abstract set(id: bigint, data: Uint8Array): Promise<void>;
    /**
     * Adds the data to the store under and id.
     * @param id The key to add the data under.
     * @param data The data to add to the store.
     */
    abstract setSync(id: bigint, data: Uint8Array): void;
    /**
     * Deletes the data at `ino`.
     * @param id The key to delete from the store.
     */
    abstract remove(id: bigint): Promise<void>;
    /**
     * Deletes the data at `ino`.
     * @param id The key to delete from the store.
     */
    abstract removeSync(id: bigint): void;
    /**
     * Commits the transaction.
     */
    abstract commit(): Promise<void>;
    [Symbol.asyncDispose](): Promise<void>;
    /**
     * Commits the transaction.
     */
    abstract commitSync(): void;
    [Symbol.dispose](): void;
    /**
     * Aborts and rolls back the transaction.
     */
    abstract abort(): Promise<void>;
    /**
     * Aborts and rolls back the transaction.
     */
    abstract abortSync(): void;
}
/**
 * Transaction that implements asynchronous operations with synchronous ones
 */
export declare abstract class SyncTransaction<T extends Store = Store> extends Transaction<T> {
    keys(): Promise<Iterable<bigint>>;
    get(id: bigint): Promise<Uint8Array>;
    set(id: bigint, data: Uint8Array): Promise<void>;
    remove(id: bigint): Promise<void>;
    commit(): Promise<void>;
    abort(): Promise<void>;
}
/**
 * Transaction that only supports asynchronous operations
 */
export declare abstract class AsyncTransaction<T extends Store = Store> extends Transaction<T> {
    keysSync(): never;
    getSync(): never;
    setSync(): never;
    removeSync(): never;
    commitSync(): never;
    abortSync(): never;
}

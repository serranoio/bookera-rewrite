import type * as fs from 'node:fs';
import type { FileSystem } from '../internal/filesystem.js';
import type { V_Context } from '../context.js';
import { ErrnoError } from '../internal/error.js';
import type { InodeLike } from '../internal/inode.js';
import { type AbsolutePath } from '../path.js';
/**
 * @internal @hidden
 */
export type MountObject = Record<AbsolutePath, FileSystem>;
/**
 * The map of mount points
 * @category Backends and Configuration
 * @internal
 */
export declare const mounts: Map<string, FileSystem>;
/**
 * Mounts the file system at `mountPoint`.
 * @category Backends and Configuration
 * @internal
 */
export declare function mount(this: V_Context, mountPoint: string, fs: FileSystem): void;
/**
 * Unmounts the file system at `mountPoint`.
 * @category Backends and Configuration
 */
export declare function umount(this: V_Context, mountPoint: string): void;
/**
 * @internal @hidden
 */
export interface ResolvedMount {
    fs: FileSystem;
    path: string;
    mountPoint: string;
    root: string;
}
/**
 * @internal @hidden
 */
export interface ResolvedPath extends ResolvedMount {
    /** The real, absolute path */
    fullPath: string;
    /** Stats */
    stats?: InodeLike;
}
/**
 * Gets the internal `FileSystem` for the path, then returns it along with the path relative to the FS' root
 * @internal @hidden
 */
export declare function resolveMount(path: string, ctx: V_Context): ResolvedMount;
/**
 * Reverse maps the paths in text from the mounted FileSystem to the global path
 * @internal @hidden
 */
export declare function fixPaths(text: string, paths: Record<string, string>): string;
/**
 * Fix paths in error stacks
 * @internal @hidden
 */
export declare function fixError<E extends ErrnoError>(e: E, paths: Record<string, string>): E;
/**
 * @internal @hidden
 */
export declare function _statfs<const T extends boolean>(fs: FileSystem, bigint?: T): T extends true ? fs.BigIntStatsFs : fs.StatsFs;
/**
 * Change the root path
 * @category Backends and Configuration
 */
export declare function chroot(this: V_Context, path: string): void;

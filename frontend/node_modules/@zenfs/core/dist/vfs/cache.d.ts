import type { Stats } from '../stats.js';
/**
 * Used for caching data
 * @internal
 */
export declare class Cache<T> {
    isEnabled: boolean;
    protected sync: Map<string, T>;
    protected async: Map<string, Promise<T>>;
    /**
     * Whether the data exists in the cache
     */
    has(path: string): boolean;
    /**
     * Gets data from the cache, if is exists and the cache is enabled.
     */
    get(path: string): T | undefined;
    /**
     * Adds data if the cache is enabled
     */
    set(path: string, value: T): void;
    /**
     * Whether the data exists in the cache
     */
    hasAsync(path: string): boolean;
    /**
     * Gets data from the cache, if it exists and the cache is enabled.
     */
    getAsync(path: string): Promise<T> | undefined;
    /**
     * Adds data if the cache is enabled
     */
    setAsync(path: string, value: Promise<T>): void;
    /**
     * Clears the cache if it is enabled
     */
    clear(): void;
}
/**
 * Used to cache
 */
export declare const stats: Cache<Stats>;
/**
 * Used to cache realpath lookups
 */
export declare const paths: Cache<string>;

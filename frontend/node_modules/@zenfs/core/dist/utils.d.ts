import type { UUID } from 'node:crypto';
import type * as fs from 'node:fs';
import { type OptionalTuple } from 'utilium';
import { ErrnoError } from './internal/error.js';
declare global {
    function atob(data: string): string;
    function btoa(data: string): string;
}
/**
 * Decodes a directory listing
 * @hidden
 */
export declare function decodeDirListing(data: Uint8Array): Record<string, number>;
/**
 * Encodes a directory listing
 * @hidden
 */
export declare function encodeDirListing(data: Record<string, number>): Uint8Array;
export type Callback<Args extends unknown[] = [], NoError = undefined | void> = (e: ErrnoError | NoError, ...args: OptionalTuple<Args>) => unknown;
/**
 * Normalizes a mode
 * @param def default
 * @internal
 */
export declare function normalizeMode(mode: unknown, def?: number): number;
/**
 * Normalizes a time
 * @internal
 */
export declare function normalizeTime(time: string | number | Date): number;
/**
 * Normalizes a path
 * @internal
 */
export declare function normalizePath(p: fs.PathLike, noResolve?: boolean): string;
/**
 * Normalizes options
 * @param options options to normalize
 * @param encoding default encoding
 * @param flag default flag
 * @param mode default mode
 * @internal
 */
export declare function normalizeOptions(options: fs.WriteFileOptions | (fs.EncodingOption & {
    flag?: fs.OpenMode;
}) | undefined, encoding: (BufferEncoding | null) | undefined, flag: string, mode?: number): {
    encoding?: BufferEncoding | null;
    flag: string;
    mode: number;
};
export declare function stringifyUUID(uuid: bigint): UUID;
export declare function parseUUID(uuid: UUID): bigint;

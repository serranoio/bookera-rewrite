import { randomHex } from 'utilium';
import { Errno, ErrnoError } from './error.js';
import { resolve } from './vfs/path.js';
/**
 * Encodes a string into a buffer
 * @internal
 */
export function encodeRaw(input) {
    if (typeof input != 'string') {
        throw new ErrnoError(Errno.EINVAL, 'Can not encode a non-string');
    }
    return new Uint8Array(Array.from(input).map(char => char.charCodeAt(0)));
}
/**
 * Decodes a string from a buffer
 * @internal
 */
export function decodeRaw(input) {
    if (!(input instanceof Uint8Array)) {
        throw new ErrnoError(Errno.EINVAL, 'Can not decode a non-Uint8Array');
    }
    return Array.from(input)
        .map(char => String.fromCharCode(char))
        .join('');
}
const encoder = new TextEncoder();
/**
 * Encodes a string into a buffer
 * @internal
 */
export function encodeUTF8(input) {
    if (typeof input != 'string') {
        throw new ErrnoError(Errno.EINVAL, 'Can not encode a non-string');
    }
    return encoder.encode(input);
}
export { /** @deprecated @hidden */ encodeUTF8 as encode };
const decoder = new TextDecoder();
/**
 * Decodes a string from a buffer
 * @internal
 */
export function decodeUTF8(input) {
    if (!(input instanceof Uint8Array)) {
        throw new ErrnoError(Errno.EINVAL, 'Can not decode a non-Uint8Array');
    }
    return decoder.decode(input);
}
export { /** @deprecated @hidden */ decodeUTF8 as decode };
/**
 * Decodes a directory listing
 * @hidden
 */
export function decodeDirListing(data) {
    return JSON.parse(decodeUTF8(data), (k, v) => (k == '' ? v : BigInt(v)));
}
/**
 * Encodes a directory listing
 * @hidden
 */
export function encodeDirListing(data) {
    return encodeUTF8(JSON.stringify(data, (k, v) => (k == '' ? v : v.toString())));
}
/**
 * Normalizes a mode
 * @internal
 */
export function normalizeMode(mode, def) {
    if (typeof mode == 'number') {
        return mode;
    }
    if (typeof mode == 'string') {
        const parsed = parseInt(mode, 8);
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
    if (typeof def == 'number') {
        return def;
    }
    throw new ErrnoError(Errno.EINVAL, 'Invalid mode: ' + (mode === null || mode === void 0 ? void 0 : mode.toString()));
}
/**
 * Normalizes a time
 * @internal
 */
export function normalizeTime(time) {
    if (time instanceof Date) {
        return time;
    }
    try {
        return new Date(time);
    }
    catch {
        throw new ErrnoError(Errno.EINVAL, 'Invalid time.');
    }
}
/**
 * Normalizes a path
 * @internal
 */
export function normalizePath(p) {
    p = p.toString();
    if (p.includes('\x00')) {
        throw new ErrnoError(Errno.EINVAL, 'Path can not contain null character');
    }
    if (p.length == 0) {
        throw new ErrnoError(Errno.EINVAL, 'Path can not be empty');
    }
    return resolve(p.replaceAll(/[/\\]+/g, '/'));
}
/**
 * Normalizes options
 * @param options options to normalize
 * @param encoding default encoding
 * @param flag default flag
 * @param mode default mode
 * @internal
 */
export function normalizeOptions(options, encoding = 'utf8', flag, mode = 0) {
    if (typeof options != 'object' || options === null) {
        return {
            encoding: typeof options == 'string' ? options : encoding !== null && encoding !== void 0 ? encoding : null,
            flag,
            mode,
        };
    }
    return {
        encoding: typeof (options === null || options === void 0 ? void 0 : options.encoding) == 'string' ? options.encoding : encoding !== null && encoding !== void 0 ? encoding : null,
        flag: typeof (options === null || options === void 0 ? void 0 : options.flag) == 'string' ? options.flag : flag,
        mode: normalizeMode('mode' in options ? options === null || options === void 0 ? void 0 : options.mode : null, mode),
    };
}
/**
 * Generate a random ino
 * @internal
 */
export function randomBigInt() {
    return BigInt('0x' + randomHex(8));
}

import { decodeUTF8, encodeUTF8 } from 'utilium';
import { Errno, ErrnoError } from './internal/error.js';
import { resolve } from './path.js';
/**
 * Decodes a directory listing
 * @hidden
 */
export function decodeDirListing(data) {
    return JSON.parse(decodeUTF8(data), (k, v) => k == '' ? v : typeof v == 'string' ? BigInt(v).toString(16).slice(0, Math.min(v.length, 8)) : v);
}
/**
 * Encodes a directory listing
 * @hidden
 */
export function encodeDirListing(data) {
    return encodeUTF8(JSON.stringify(data));
}
/**
 * Normalizes a mode
 * @param def default
 * @internal
 */
export function normalizeMode(mode, def) {
    if (typeof mode == 'number')
        return mode;
    if (typeof mode == 'string') {
        const parsed = parseInt(mode, 8);
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
    if (typeof def == 'number')
        return def;
    throw new ErrnoError(Errno.EINVAL, 'Invalid mode: ' + (mode === null || mode === void 0 ? void 0 : mode.toString()));
}
/**
 * Normalizes a time
 * @internal
 */
export function normalizeTime(time) {
    if (time instanceof Date)
        return time.getTime();
    try {
        return Number(time);
    }
    catch {
        throw new ErrnoError(Errno.EINVAL, 'Invalid time.');
    }
}
/**
 * Normalizes a path
 * @internal
 */
export function normalizePath(p, noResolve = false) {
    if (p instanceof URL) {
        if (p.protocol != 'file:')
            throw new ErrnoError(Errno.EINVAL, 'URLs must use the file: protocol');
        p = p.pathname;
    }
    p = p.toString();
    if (p.startsWith('file://'))
        p = p.slice('file://'.length);
    if (p.includes('\x00')) {
        throw new ErrnoError(Errno.EINVAL, 'Path can not contain null character');
    }
    if (p.length == 0) {
        throw new ErrnoError(Errno.EINVAL, 'Path can not be empty');
    }
    p = p.replaceAll(/[/\\]+/g, '/');
    // Note: PWD is not resolved here, it is resolved later.
    return noResolve ? p : resolve(p);
}
/**
 * Normalizes options
 * @param options options to normalize
 * @param encoding default encoding
 * @param flag default flag
 * @param mode default mode
 * @internal
 */
export function normalizeOptions(options, encoding = 'utf8', flag, mode = 0) {
    if (typeof options != 'object' || options === null) {
        return {
            encoding: typeof options == 'string' ? options : (encoding !== null && encoding !== void 0 ? encoding : null),
            flag,
            mode,
        };
    }
    return {
        encoding: typeof (options === null || options === void 0 ? void 0 : options.encoding) == 'string' ? options.encoding : (encoding !== null && encoding !== void 0 ? encoding : null),
        flag: typeof (options === null || options === void 0 ? void 0 : options.flag) == 'string' ? options.flag : flag,
        mode: normalizeMode('mode' in options ? options === null || options === void 0 ? void 0 : options.mode : null, mode),
    };
}
export function stringifyUUID(uuid) {
    const hex = uuid.toString(16).padStart(32, '0');
    return `${hex.slice(0, 8)}-${hex.slice(8, 12)}-${hex.slice(12, 16)}-${hex.slice(16, 20)}-${hex.slice(20)}`;
}
export function parseUUID(uuid) {
    return BigInt(`0x${uuid.replace(/-/g, '')}`);
}

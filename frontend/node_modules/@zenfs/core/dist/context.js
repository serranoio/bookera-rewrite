import { bindFunctions } from 'utilium';
import { defaultContext } from './internal/contexts.js';
import { createCredentials } from './internal/credentials.js';
import * as path from './path.js';
import * as fs from './vfs/index.js';
// 0 is reserved for the global/default context
let _nextId = 1;
/**
 * A map of all contexts.
 * @internal
 * @category Contexts
 */
export const boundContexts = new Map();
/**
 * Allows you to restrict operations to a specific root path and set of credentials.
 * Note that the default credentials of a bound context are copied from the global credentials.
 * @category Contexts
 */
export function bindContext({ root = (this === null || this === void 0 ? void 0 : this.root) || '/', pwd = (this === null || this === void 0 ? void 0 : this.pwd) || '/', credentials = structuredClone(defaultContext.credentials) } = {}) {
    const parent = this !== null && this !== void 0 ? this : defaultContext;
    const ctx = {
        id: _nextId++,
        root,
        pwd,
        credentials: createCredentials(credentials),
        descriptors: new Map(),
        parent,
        children: [],
    };
    const bound = {
        ...ctx,
        fs: {
            ...bindFunctions(fs, ctx),
            promises: bindFunctions(fs.promises, ctx),
            xattr: bindFunctions(fs.xattr, ctx),
        },
        path: bindFunctions(path, ctx),
        bind: (init) => {
            const child = bindContext.call(ctx, init);
            ctx.children.push(child);
            return child;
        },
    };
    boundContexts.set(ctx.id, bound);
    return bound;
}

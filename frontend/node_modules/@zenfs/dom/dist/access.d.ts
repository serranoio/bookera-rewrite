import type { CreationOptions, FileSystemMetadata } from '@zenfs/core';
import { FileSystem, PreloadFile, Stats } from '@zenfs/core';
export interface WebAccessOptions {
    handle: FileSystemDirectoryHandle;
}
declare const WebAccessFS_base: import("@zenfs/core").Mixin<typeof FileSystem, import("@zenfs/core").AsyncMixin>;
export declare class WebAccessFS extends WebAccessFS_base {
    private _handles;
    /**
     * @hidden
     */
    _sync: FileSystem;
    constructor(handle: FileSystemDirectoryHandle);
    metadata(): FileSystemMetadata;
    sync(path: string, data: Uint8Array): Promise<void>;
    rename(oldPath: string, newPath: string): Promise<void>;
    writeFile(path: string, data: Uint8Array): Promise<void>;
    createFile(path: string, flag: string): Promise<PreloadFile<this>>;
    stat(path: string): Promise<Stats>;
    openFile(path: string, flag: string): Promise<PreloadFile<this>>;
    unlink(path: string): Promise<void>;
    link(srcpath: string): Promise<void>;
    rmdir(path: string): Promise<void>;
    mkdir(path: string, mode?: number, options?: CreationOptions): Promise<void>;
    readdir(path: string): Promise<string[]>;
    protected getHandle(path: string): Promise<FileSystemHandle | undefined>;
}
declare const _WebAccess: {
    readonly name: "WebAccess";
    readonly options: {
        readonly handle: {
            readonly type: "object";
            readonly required: true;
        };
    };
    readonly isAvailable: () => boolean;
    readonly create: (options: WebAccessOptions) => WebAccessFS;
};
type _WebAccess = typeof _WebAccess;
export interface WebAccess extends _WebAccess {
}
export declare const WebAccess: WebAccess;
export {};

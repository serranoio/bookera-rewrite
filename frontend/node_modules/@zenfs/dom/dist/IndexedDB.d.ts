import type { SharedConfig, Store } from '@zenfs/core';
import { AsyncTransaction, StoreFS } from '@zenfs/core';
import type * as cache from 'utilium/cache.js';
/**
 * @internal @hidden
 */
export declare class IndexedDBTransaction extends AsyncTransaction<IndexedDBStore> {
    tx: IDBTransaction;
    store: IndexedDBStore;
    private _idb;
    constructor(tx: IDBTransaction, store: IndexedDBStore);
    keys(): Promise<Iterable<number>>;
    get(id: number): Promise<Uint8Array | undefined>;
    set(id: number, data: Uint8Array): Promise<void>;
    remove(id: number): Promise<void>;
    commit(): Promise<void>;
    abort(): Promise<void>;
}
export declare class IndexedDBStore implements Store {
    protected db: IDBDatabase;
    cache: Map<number, cache.Resource<number>>;
    constructor(db: IDBDatabase);
    sync(): Promise<void>;
    get name(): string;
    transaction(): IndexedDBTransaction;
}
/**
 * Configuration options for the IndexedDB file system.
 */
export interface IndexedDBOptions {
    /**
     * The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.
     */
    storeName?: string;
    /**
     * The IDBFactory to use. Defaults to `globalThis.indexedDB`.
     */
    idbFactory?: IDBFactory;
}
/**
 * A file system that uses the IndexedDB key value file system.
 */
declare const _IndexedDB: {
    readonly name: "IndexedDB";
    readonly options: {
        readonly storeName: {
            readonly type: "string";
            readonly required: false;
        };
        readonly idbFactory: {
            readonly type: "object";
            readonly required: false;
        };
    };
    readonly isAvailable: ({ idbFactory }: IndexedDBOptions) => Promise<boolean>;
    readonly create: (options: IndexedDBOptions & Partial<SharedConfig>) => Promise<StoreFS<IndexedDBStore>>;
};
type _IndexedDB = typeof _IndexedDB;
export interface IndexedDB extends _IndexedDB {
}
export declare const IndexedDB: IndexedDB;
export {};

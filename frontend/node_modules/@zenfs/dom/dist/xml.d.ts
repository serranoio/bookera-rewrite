import type { CreationOptions, File, FileSystemMetadata, StatsLike } from '@zenfs/core';
import { FileSystem, Stats } from '@zenfs/core';
export interface XMLOptions {
    /**
     * The root `fs` element
     */
    root?: Element;
}
declare const XMLFS_base: import("@zenfs/core").Mixin<typeof FileSystem, import("@zenfs/core").AsyncFSMethods>;
export declare class XMLFS extends XMLFS_base {
    /**
     * @inheritdoc XMLOptions.root
     */
    readonly root: Element;
    constructor(
    /**
     * @inheritdoc XMLOptions.root
     */
    root?: Element);
    metadata(): FileSystemMetadata;
    renameSync(oldPath: string, newPath: string): void;
    statSync(path: string): Stats;
    openFileSync(path: string, flag: string): File;
    createFileSync(path: string, flag: string, mode: number, { uid, gid }: CreationOptions): File;
    unlinkSync(path: string): void;
    rmdirSync(path: string): void;
    mkdirSync(path: string, mode: number, { uid, gid }: CreationOptions): void;
    readdirSync(path: string): string[];
    linkSync(target: string, link: string): void;
    syncSync(path: string, data: Uint8Array, stats: Readonly<Stats>): void;
    toString(): string;
    protected get(syscall: string, path: string): Element;
    protected create(syscall: string, path: string, stats: Partial<StatsLike<number>> & Pick<StatsLike, 'mode'>): Element;
    protected add(syscall: string, node: Element, path: string, contents?: boolean): void;
    protected remove(syscall: string, node: Element, path: string, contents?: boolean): void;
}
declare const _XML: {
    name: string;
    options: {
        root: {
            type: "object";
            required: false;
        };
    };
    isAvailable(): boolean;
    create(options: XMLOptions): XMLFS;
};
type _XML = typeof _XML;
export interface XML extends _XML {
}
/**
 * @experimental
 */
export declare const XML: XML;
export {};

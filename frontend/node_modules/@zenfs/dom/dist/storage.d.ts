import type { Store, SyncMapStore } from '@zenfs/core';
import { StoreFS, SyncMapTransaction } from '@zenfs/core';
/**
 * A synchronous key-value store backed by Storage.
 */
export declare class WebStorageStore implements Store, SyncMapStore {
    protected storage: Storage;
    get name(): string;
    constructor(storage: Storage);
    clear(): void;
    clearSync(): void;
    sync(): Promise<void>;
    transaction(): SyncMapTransaction;
    keys(): Iterable<number>;
    get(key: number): Uint8Array | undefined;
    set(key: number, data: Uint8Array): void;
    delete(key: number): void;
}
/**
 * Options to pass to the StorageFileSystem
 */
export interface WebStorageOptions {
    /**
     * The Storage to use. Defaults to globalThis.localStorage.
     */
    storage?: Storage;
}
/**
 * A synchronous file system backed by a `Storage` (e.g. localStorage).
 */
declare const _WebStorage: {
    readonly name: "WebStorage";
    readonly options: {
        readonly storage: {
            readonly type: "object";
            readonly required: false;
        };
    };
    /**
     * @todo Consider replacing `instanceof` with a duck-typing check?
     */
    readonly isAvailable: (config?: WebStorageOptions) => boolean;
    readonly create: ({ storage }: WebStorageOptions) => StoreFS<WebStorageStore>;
};
type _WebStorage = typeof _WebStorage;
export interface WebStorage extends _WebStorage {
}
export declare const WebStorage: WebStorage;
export {};

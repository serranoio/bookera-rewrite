if ('AudioWorkletProcessor' in globalThis) {
    class Dsp extends AudioWorkletProcessor {
        constructor() {
            super();
            this.port.onmessage = ({ data }) => {
                this.buffer = new Float32Array(data);
            };
        }
        process(inputs, outputs) {
            if (this.buffer && this.buffer.byteLength >= 128) {
                outputs[0][0].set(this.buffer.subarray(0, 128));
                this.buffer = this.buffer.subarray(128);
            }
            return true;
        }
        static get parameterDescriptors() {
            return [
                {
                    name: 'gain',
                    defaultValue: 1,
                    minValue: 0,
                    maxValue: 1,
                    automationRate: 'a-rate',
                },
            ];
        }
    }
    registerProcessor('zenfs:dsp', Dsp);
}
export async function dsp(options = {}) {
    const context = options.audioContext || new AudioContext();
    await context.audioWorklet.addModule(import.meta.url);
    const dsp = new AudioWorkletNode(context, 'zenfs:dsp');
    dsp.connect(context.destination);
    // add a click-handler to resume (due to web security) https://goo.gl/7K7WLu
    document.addEventListener('click', () => {
        if (context.state != 'running') {
            void context.resume().catch(() => { });
        }
    });
    return {
        name: 'dsp',
        singleton: true,
        init(ino, options) {
            return { data: dsp, major: 14, minor: 3 };
        },
        read() {
            return;
        },
        write(device, buffer, offset) {
            device.data.port.postMessage(buffer.buffer);
        },
    };
}

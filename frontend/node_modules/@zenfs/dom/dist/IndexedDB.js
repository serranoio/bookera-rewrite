import { AsyncTransaction, StoreFS, log } from '@zenfs/core';
import { convertException } from './utils.js';
function wrap(request) {
    return new Promise((resolve, reject) => {
        request.onsuccess = () => resolve(request.result);
        request.onerror = e => {
            e.preventDefault();
            reject(convertException(request.error));
        };
    });
}
/**
 * @internal @hidden
 */
export class IndexedDBTransaction extends AsyncTransaction {
    constructor(tx, store) {
        super(store);
        this.tx = tx;
        this.store = store;
        this._idb = tx.objectStore(store.name);
    }
    async keys() {
        return (await wrap(this._idb.getAllKeys())).filter(k => typeof k == 'string').map(k => Number(k));
    }
    async get(id) {
        const data = await wrap(this._idb.get(id.toString()));
        if (data)
            this._cached(id, { size: data.byteLength }).add(data, 0);
        return data;
    }
    async set(id, data) {
        this._cached(id, { size: data.byteLength }).add(data, 0);
        await wrap(this._idb.put(data, id.toString()));
    }
    remove(id) {
        this.store.cache.delete(id);
        return wrap(this._idb.delete(id.toString()));
    }
    async commit() {
        const { promise, resolve, reject } = Promise.withResolvers();
        this.tx.oncomplete = () => resolve();
        this.tx.onerror = () => reject(convertException(this.tx.error));
        this.tx.commit();
        return promise;
    }
    async abort() {
        const { promise, resolve, reject } = Promise.withResolvers();
        this.tx.onabort = () => resolve();
        this.tx.onerror = () => reject(convertException(this.tx.error));
        this.tx.abort();
        return promise;
    }
}
async function createDB(name, indexedDB = globalThis.indexedDB) {
    const req = indexedDB.open(name);
    req.onupgradeneeded = () => {
        const db = req.result;
        // This should never happen; we're at version 1. Why does another database exist?
        if (db.objectStoreNames.contains(name)) {
            log.warn('Found unexpected object store: ' + name);
            db.deleteObjectStore(name);
        }
        db.createObjectStore(name);
    };
    return await wrap(req);
}
export class IndexedDBStore {
    constructor(db) {
        this.db = db;
        this.cache = new Map();
    }
    sync() {
        return Promise.resolve();
    }
    get name() {
        return this.db.name;
    }
    transaction() {
        const tx = this.db.transaction(this.name, 'readwrite');
        return new IndexedDBTransaction(tx, this);
    }
}
/**
 * A file system that uses the IndexedDB key value file system.
 */
const _IndexedDB = {
    name: 'IndexedDB',
    options: {
        storeName: { type: 'string', required: false },
        idbFactory: { type: 'object', required: false },
    },
    async isAvailable({ idbFactory = globalThis.indexedDB }) {
        try {
            if (!(idbFactory instanceof IDBFactory))
                return false;
            const req = idbFactory.open('__zenfs_test');
            await wrap(req);
            return true;
        }
        catch {
            return false;
        }
        finally {
            idbFactory?.deleteDatabase('__zenfs_test');
        }
    },
    async create(options) {
        const db = await createDB(options.storeName || 'zenfs', options.idbFactory);
        const store = new IndexedDBStore(db);
        const fs = new StoreFS(store);
        if (options?.disableAsyncCache) {
            log.notice('Async preloading disabled for IndexedDB');
            return fs;
        }
        const tx = store.transaction();
        for (const id of await tx.keys()) {
            await tx.get(id); // Adds to cache
        }
        return fs;
    },
};
export const IndexedDB = _IndexedDB;

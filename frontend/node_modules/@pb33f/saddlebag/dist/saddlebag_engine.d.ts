import { Bag, BagAllChangeSubscriptionFunction, BagPopulatedSubscriptionFunction, BagValueSubscriptionFunction, Subscription } from './saddlebag.js';

export declare function CreateBag<T>(id: string, stateful?: boolean): Bag<T>;
export declare class BagSubscription<T> {
    private readonly _allChangesBit;
    private _key;
    private _subFunction;
    private _allChangesFunction;
    private _populatedFunction;
    private readonly _bag;
    constructor(bag: bag<T>, allChangesBit: number);
    set allChangeFunction(allChangesFunction: BagAllChangeSubscriptionFunction<T>);
    set populatedFunction(populatedFunction: BagPopulatedSubscriptionFunction<T>);
    set subscriptionFunction(subFunction: BagValueSubscriptionFunction<T>);
    set key(key: string);
    unsubscribe(): void;
}
declare class bag<T> {
    private _id;
    private _stateful;
    private _values;
    private _db;
    _subscriptions: Map<string, BagValueSubscriptionFunction<T>[]>;
    _allChangesSubscriptions: BagAllChangeSubscriptionFunction<T>[];
    _storePopulatedSubscriptions: BagPopulatedSubscriptionFunction<T>[];
    constructor(id: string, stateful?: boolean);
    set(key: string, value: T): void;
    get id(): string;
    set db(db: IDBDatabase | undefined);
    reset(): void;
    private alertSubscribers;
    get(key: string): T | undefined;
    populate(data: Map<string, T>): void;
    export(): Map<string, T>;
    subscribe(key: string, callback: BagValueSubscriptionFunction<T>): Subscription;
    onAllChanges(callback: BagAllChangeSubscriptionFunction<T>): Subscription;
    onPopulated(callback: BagPopulatedSubscriptionFunction<T>): BagSubscription<T>;
}
export {};

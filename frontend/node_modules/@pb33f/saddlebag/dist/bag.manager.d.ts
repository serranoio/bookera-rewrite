import { Bag } from './saddlebag.js';

export declare const BAG_OBJECT_STORE = "bags";
export declare const BAG_DB_NAME = "saddlebag";
/**
 * BagManager is a singleton that manages all the bags in the application.
 */
export interface BagManager {
    /**
     * Create a bag with the given key.
     * @param {string} key to use when referencing the bag
     * @return {Bag} the bag that was created
     */
    createBag<T>(key: string): Bag<T> | undefined;
    /**
     * Get a bag with the given key. If the bag does
     * not exist, then it will be created.
     * @param key to use when referencing the bag
     * @return {Bag} the bag that was requested
     */
    getBag<T>(key: string): Bag<T> | undefined;
    /**
     * Reset all bags to their initial state.
     */
    resetBags(): void;
    /**
     * Load all stateful bags from IndexedDB.
     * @return {Promise<BagDB>} a promise that resolves when all bags are loaded
     */
    loadStatefulBags(): Promise<BagDB>;
    /**
     * Get the indexedDB database
     * @return {IDBDatabase | null} the indexedDB database
     */
    get db(): IDBDatabase | null;
}
export interface BagDB {
    db: IDBDatabase | undefined;
}
/**
 * CreateBagManager creates a singleton BagManager.
 * @returns {BagManager} the singleton BagManager
 */
export declare function CreateBagManager(stateful?: boolean): BagManager;
/**
 * GetBagManager returns the singleton BagManager.
 * @returns {BagManager} the singleton BagManager
 */
export declare function GetBagManager(): BagManager;
